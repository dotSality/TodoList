{"version":3,"sources":["serviceWorker.ts","api/tasks-api.ts","Components/AddItemForm.tsx","api/todolist-api.ts","state/todolists-reducer.ts","EditableSpan.tsx","state/tasks-reducer.ts","Components/Task.tsx","Components/TodoList1.tsx","App.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","AddItemForm","React","memo","props","useState","title","setTitle","error","setError","addItem","trimmedTitle","trim","TextField","helperText","label","value","onChange","e","currentTarget","onKeyPress","key","IconButton","size","onClick","AddOutlined","fontSize","axiosInstance","axios","create","baseURL","withCredentials","headers","todolistApi","get","then","res","data","post","id","delete","put","changeTodoFilterAC","filter","type","initialState","tasksAPI","tlId","taskId","task","item","EditableSpan","editMode","setEditMode","onEditMode","offEditMode","setNewTitle","style","width","onBlur","autoFocus","onDoubleClick","display","margin","Edit","updateTaskAC","taskID","model","todolistID","Task","dispatch","useDispatch","removeTaskCallback","useCallback","todolistId","changeTaskStatus","status","checked","Completed","New","getState","tasks","find","t","changeTitle","changeTaskTitleTC","ListItem","padding","justifyContent","alignItems","className","Checkbox","color","Delete","Todolist1","todoList","useSelector","state","todolists","tl","useEffect","setTasksAC","items","addTask","createTaskTC","changeTodolistTitle","changeTodoTitleAC","changeTodoTitleTC","removeTodolist","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","tasksForRender","Typography","align","List","map","ButtonGroup","variant","disableElevation","Button","App","todoLists","addTodoList","todo","addTodoAC","createTodoTC","todoListsComponents","Grid","Paper","elevation","AppBar","position","Toolbar","edge","aria-label","Menu","Container","fixed","container","spacing","rootReducer","combineReducers","action","copy","todoListId","forEach","stateCopy","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.a79cafde.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios, {AxiosResponse} from 'axios';\r\nimport {ResponseType} from './todolist-api';\r\n\r\nconst axiosInstance = axios.create({\r\n    baseURL: `https://social-network.samuraijs.com/api/1.1/todo-lists/`,\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'ecad3ae6-8083-4154-b722-6cea4b99f288'\r\n    }\r\n})\r\n\r\nexport const tasksAPI = {\r\n    getTasks(tlId: string) {\r\n        return axiosInstance.get<Response<TaskType[]>>(`${tlId}/tasks`).then(res => res.data)\r\n    },\r\n    createTask(tlId: string, title: string) {\r\n        return axiosInstance.post<{title: string},AxiosResponse<ResponseType<{ item: TaskType }>>>(`${tlId}/tasks`, {title}).then(res => res.data.data)\r\n    },\r\n    deleteTask(tlId: string, taskId: string) {\r\n        return axiosInstance.delete<Response>(`${tlId}/tasks/${taskId}`).then(res => res.data)\r\n    },\r\n    updateTask(tlId: string, taskId: string, task: TaskModelType) {\r\n        return axiosInstance.put<TaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`${tlId}/tasks/${taskId}`, task).then(res => res.data.data.item)\r\n    }\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3,\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    High = 2,\r\n    Urgently = 3,\r\n    Later = 4,\r\n}\r\n\r\nexport type TaskType = {\r\n    title: string,\r\n    description: string,\r\n    status: TaskStatuses,\r\n    priority: number,\r\n    startDate: string,\r\n    deadline: string,\r\n    id: string,\r\n    todoListId: string,\r\n    order: string,\r\n    addedDate: string,\r\n}\r\n\r\nexport type TaskModelType = {\r\n    title: string,\r\n    description: string,\r\n    status: TaskStatuses,\r\n    priority: TaskPriorities,\r\n    startDate: string,\r\n    deadline: string,\r\n}\r\n\r\ntype Response<D = {}> = {\r\n    items: D,\r\n    error: string[],\r\n    totalCount: number\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddOutlined} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\r\n    let [title, setTitle] = useState<string>(\"\")\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        setError(false)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    const addItem = () => {\r\n        const trimmedTitle = title.trim();\r\n        setTitle(\"\");\r\n        if (trimmedTitle) {\r\n            props.addItem(trimmedTitle);\r\n        } else {\r\n            setError(true);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                error={error}\r\n                helperText={error && 'Title is required'}\r\n                label={'Enter title'}\r\n                value={title}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n            />\r\n            <IconButton size={'small'} onClick={addItem}>\r\n                <AddOutlined fontSize={'large'}/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import axios, {AxiosResponse} from 'axios';\r\nimport {TodoDomainType} from '../state/todolists-reducer';\r\n\r\nconst axiosInstance = axios.create({\r\n    baseURL: `https://social-network.samuraijs.com/api/1.1/`,\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'ecad3ae6-8083-4154-b722-6cea4b99f288'\r\n    }\r\n})\r\n\r\nexport const todolistApi = {\r\n    getTLs() {\r\n        return axiosInstance.get<TodoDomainType[]>(`todo-lists`).then(res => res.data)\r\n    },\r\n    createTL(title: string) {\r\n        return axiosInstance.post<{title: string}, AxiosResponse<ResponseType<{ item: TodoDomainType }>>>(`todo-lists`, {title}).then(res => res.data.data)\r\n    },\r\n    deleteTL(id: string) {\r\n        return axiosInstance.delete<Response>(`/todo-lists/${id}`).then(res => res.data)\r\n    },\r\n    updateTLTitle(id: string, title: string) {\r\n        return axiosInstance.put<{title: string},Response>(`/todo-lists/${id}`, {title})\r\n    },\r\n}\r\n\r\nexport type TodoType = {\r\n    id: string,\r\n    title: string,\r\n    addedDate: string,\r\n    order: number,\r\n}\r\n\r\nexport type ResponseType<T = {}> = {\r\n    fieldsErrors: string[],\r\n    messages: string[],\r\n    resultCode: number,\r\n    data: T\r\n}","import {ThunkAction} from 'redux-thunk';\r\nimport {AppRootStateType} from './store';\r\nimport {todolistApi, TodoType} from '../api/todolist-api';\r\n\r\nexport type RemoveTodoListAT = ReturnType<typeof removeTodolistAC>\r\nexport type setTodoAT = ReturnType<typeof setTodoAC>\r\ntype ChangeTodoTitleAT = ReturnType<typeof changeTodoTitleAC>\r\ntype ChangeTodoFilterAT = ReturnType<typeof changeTodoFilterAC>\r\ntype AddTodoAT = ReturnType<typeof addTodoAC>\r\n\r\nexport const removeTodolistAC = (todolistID: string) => ({type: 'REMOVE-TODO', todolistID} as const)\r\nexport const addTodoAC = (title: string, todo: TodoDomainType) => ({type: 'ADD-TODO', title, todo} as const)\r\nexport const setTodoAC = (todolists: TodoDomainType[]) => ({type: 'SET-TODO', todolists} as const)\r\nexport const changeTodoTitleAC = (title: string, id: string) => ({type: 'CHANGE-TODO-TITLE', title, id} as const)\r\nexport const changeTodoFilterAC = (filter: FilterValuesType, id: string) => ({type: 'CHANGE-FILTER', filter, id} as const)\r\n\r\nexport type TodoActionType = RemoveTodoListAT | setTodoAT | ChangeTodoTitleAT | ChangeTodoFilterAT | AddTodoAT\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodoDomainType = TodoType & {\r\n    filter: FilterValuesType\r\n}\r\n\r\nconst initialState: TodoDomainType[] = []\r\n\r\nexport const todolistsReducer = (state = initialState, action: TodoActionType):TodoDomainType[] => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODO':\r\n            return state.filter(tl => tl.id !== action.todolistID);\r\n        case 'SET-TODO':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all'}));\r\n        case 'ADD-TODO':\r\n            return [{...action.todo, filter: 'all'}, ...state]\r\n        case 'CHANGE-TODO-TITLE':\r\n            return [...state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)];\r\n        case 'CHANGE-FILTER':\r\n            return [...state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)]\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// THUNK\r\n\r\ntype ThunkType = ThunkAction<void, AppRootStateType, unknown, TodoActionType>\r\n\r\nexport const getTodoTC = (): ThunkType => (dispatch, getState) => {\r\n    todolistApi.getTLs()\r\n        .then(res => dispatch(setTodoAC(res)))\r\n}\r\n\r\nexport const removeTodoTC = (tlId: string): ThunkType => (dispatch) => {\r\n    todolistApi.deleteTL(tlId)\r\n        .then(res => dispatch(removeTodolistAC(tlId)))\r\n}\r\n\r\nexport const createTodoTC = (title: string): ThunkType => (dispatch) => {\r\n    todolistApi.createTL(title)\r\n        // .then(res => dispatch(addTodoAC(title, res)))\r\n        .then(res => dispatch(addTodoAC(title, res.item)))\r\n}\r\n\r\nexport const changeTodoTitleTC = (tlId: string, title: string):ThunkType => (dispatch) => {\r\n    todolistApi.updateTLTitle(tlId, title)\r\n        .then(res => dispatch(changeTodoTitleAC(title, tlId)))\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {Edit} from '@material-ui/icons';\r\n\r\ntype EditableSpanProps = {\r\n    title: string\r\n    setNewTitle: (title: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanProps) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(props.title)\r\n\r\n    const onEditMode = () => setEditMode(true)\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.setNewTitle(title)\r\n    }\r\n\r\n    const onKeyPressOffEditMode = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter')\r\n            offEditMode()\r\n    }\r\n\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n            editMode ? <TextField\r\n                    style={{width: '148px'}}\r\n                    value={title}\r\n                    onBlur={offEditMode}\r\n                    autoFocus onChange={changeTitle}\r\n                    onKeyPress={onKeyPressOffEditMode}/>\r\n            : <span onDoubleClick={onEditMode} style={{display: 'inline-block', margin: '0 auto 0 0'}}>{props.title}\r\n            <IconButton style={{display: 'inline-block'}} size={'small'} onClick={onEditMode}>\r\n                <Edit fontSize={'small'}/>\r\n            </IconButton>\r\n        </span>\r\n    )\r\n})","import {TaskModelType, tasksAPI, TaskStatuses, TaskType} from '../api/tasks-api';\r\nimport {RemoveTodoListAT, setTodoAT} from './todolists-reducer';\r\nimport {ThunkAction} from 'redux-thunk';\r\nimport {AppRootStateType} from './store';\r\n\r\nexport type RemoveTaskAT = ReturnType<typeof removeTaskAC>\r\nexport type AddTaskAT = ReturnType<typeof addTaskAC>\r\nexport type updateTaskAT = ReturnType<typeof updateTaskAC>\r\nexport type ChangeTaskTitleAT = ReturnType<typeof changeTaskTitleAC>\r\nexport type SetTasksAT = ReturnType<typeof setTasksAC>\r\n\r\nexport const removeTaskAC = (taskID: string, todolistID: string) => ({type: 'REMOVE-TASK', taskID, todolistID} as const)\r\nexport const addTaskAC = (task: TaskType) => ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskID: string, model: TaskModelType, todolistID: string) => ({type: 'UPDATE-TASK', taskID, model, todolistID} as const)\r\nexport const changeTaskTitleAC = (taskID: string, title: string, todolistID: string) => ({type: 'CHANGE-TITLE', taskID, title, todolistID} as const)\r\nexport const setTasksAC = (tlId: string, tasks: TaskType[]) => ({type: 'SET-TASKS', tasks, tlId} as const)\r\n\r\nexport type TaskActionType = RemoveTaskAT\r\n    | AddTaskAT\r\n    | updateTaskAT\r\n    | ChangeTaskTitleAT\r\n    | setTodoAT\r\n    | RemoveTodoListAT\r\n    | SetTasksAT\r\n\r\ntype TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state = initialState, action: TaskActionType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistID]: state[action.todolistID].filter(t => t.id !== action.taskID)};\r\n        case 'ADD-TASK': {\r\n            let copy = {...state}\r\n            let tasks = copy[action.task.todoListId]\r\n            copy[action.task.todoListId] = [action.task, ...tasks]\r\n            return copy\r\n        }\r\n        case 'UPDATE-TASK':\r\n            return {...state, [action.todolistID]: state[action.todolistID].map(t => action.taskID === t.id ? {...t, ...action.model} : t)}\r\n        case 'CHANGE-TITLE':\r\n            return {...state, [action.todolistID]: state[action.todolistID].map(t => t.id === action.taskID ? {...t, title: action.title} : t)}\r\n        case 'SET-TODO': {\r\n            let copy = {...state}\r\n            action.todolists.forEach(tl => copy[tl.id] = [])\r\n            return copy\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.tlId]: action.tasks}\r\n        case 'REMOVE-TODO': {\r\n            let stateCopy = {...state}\r\n            delete stateCopy[action.todolistID]\r\n            return stateCopy\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// THUNK\r\ntype ThunkType = ThunkAction<void, AppRootStateType, unknown, TaskActionType>\r\n\r\nexport const getTasksTC = (tlId: string): ThunkType => (dispatch) => {\r\n    tasksAPI.getTasks(tlId)\r\n        .then(res => dispatch(setTasksAC(tlId, res.items)))\r\n}\r\n\r\nexport const deleteTaskTC = (tlId: string, taskId: string): ThunkType => (dispatch) => {\r\n    tasksAPI.deleteTask(tlId, taskId)\r\n        .then(res => dispatch(removeTaskAC(taskId, tlId)))\r\n}\r\n\r\nexport const createTaskTC = (tlId: string, title: string): ThunkType => (dispatch) => {\r\n    tasksAPI.createTask(tlId, title)\r\n        .then(res => dispatch(addTaskAC(res.item)))\r\n}\r\n\r\nexport const updateTaskStatusTC = (tlId: string, taskId: string, status: TaskStatuses): ThunkType => {\r\n   return (dispatch, getState) => {\r\n       const tasksFromCurrentTodo = getState().tasks[tlId]\r\n       const task = tasksFromCurrentTodo.find(t => t.id === taskId)\r\n\r\n       if (task) {\r\n           let model: TaskModelType = {...task, status}\r\n           tasksAPI.updateTask(tlId, taskId, model)\r\n               .then(res => dispatch(updateTaskAC(taskId, model, tlId)))\r\n       }\r\n    }\r\n}\r\n\r\nexport const changeTaskTitleTC = (tlId: string, taskId: string, title: string): ThunkType => {\r\n    return (dispatch, getState) => {\r\n        const task = getState().tasks[tlId].find(t => t.id === taskId)\r\n\r\n        if(task) {\r\n            let model: TaskModelType = {...task, title}\r\n            tasksAPI.updateTask(tlId, taskId, model)\r\n                .then(res => dispatch(updateTaskAC(taskId, model, tlId)))\r\n        }\r\n    }\r\n}","import {useDispatch} from 'react-redux';\r\nimport {updateTaskAC, changeTaskTitleAC, deleteTaskTC, updateTaskStatusTC, changeTaskTitleTC} from '../state/tasks-reducer';\r\nimport React, {ChangeEvent, useCallback} from 'react';\r\nimport {Checkbox, IconButton, ListItem} from '@material-ui/core';\r\nimport {EditableSpan} from '../EditableSpan';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {TaskStatuses, TaskType} from '../api/tasks-api';\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType,\r\n    todolistId: string,\r\n}\r\n\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n\r\n    const dispatch = useDispatch()\r\n    const removeTaskCallback = useCallback(() => dispatch(deleteTaskTC(props.todolistId, props.task.id)),\r\n        [dispatch, props.task.id, props.todolistId])\r\n\r\n    const changeTaskStatus = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let value = e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New\r\n        dispatch(updateTaskStatusTC(props.todolistId, props.task.id, value))\r\n    }, [dispatch, props.task.id, props.todolistId])\r\n\r\n    const changeTitle = useCallback((title: string) => {\r\n        dispatch(changeTaskTitleTC(props.todolistId, props.task.id, title))\r\n    }, [dispatch, props.task.id, props.todolistId])\r\n    return <ListItem\r\n        style={{padding: '0', display: 'flex', justifyContent: 'space-between'}}\r\n        alignItems={'center'}\r\n        className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            onChange={changeTaskStatus}\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color={'primary'}\r\n            size={'small'}/>\r\n        <EditableSpan setNewTitle={changeTitle} title={props.task.title}/>\r\n        <IconButton size={'small'} onClick={removeTaskCallback}>\r\n            <Delete fontSize={'small'}/>\r\n        </IconButton>\r\n    </ListItem>\r\n})","import React, {useCallback, useEffect} from 'react';\r\nimport {TaskStatuses, TaskType} from '../api/tasks-api';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {EditableSpan} from '../EditableSpan';\r\nimport {Button, ButtonGroup, IconButton, List, Typography} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../state/store';\r\nimport {changeTodoFilterAC, changeTodoTitleAC, changeTodoTitleTC, removeTodolistAC, removeTodoTC, TodoDomainType} from '../state/todolists-reducer';\r\nimport {createTaskTC, getTasksTC} from '../state/tasks-reducer';\r\nimport {Task} from './Task';\r\n\r\ntype PropsType = {\r\n    todolistId: string\r\n    title: string\r\n}\r\n\r\nexport const Todolist1 = React.memo(function (props: PropsType) {\r\n\r\n    const todoList = useSelector<AppRootStateType, TodoDomainType>(state => state.todolists.filter(tl => tl.id === props.todolistId)[0])\r\n    const tasks = useSelector<AppRootStateType, TaskType[]>(state => state.tasks[props.todolistId])\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(getTasksTC(todoList.id))\r\n    },[])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        dispatch(createTaskTC(todoList.id, title));\r\n    }, [dispatch, props.todolistId])\r\n\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        dispatch(changeTodoTitleTC(props.todolistId, title));\r\n    }, [dispatch, props.todolistId])\r\n\r\n    const removeTodolist = useCallback(() => {\r\n        dispatch(removeTodoTC(props.todolistId))\r\n    },[dispatch, props.todolistId])\r\n\r\n    const onAllClickHandler = useCallback(() => dispatch(changeTodoFilterAC(\"all\", props.todolistId)), [dispatch, props.todolistId]);\r\n    const onActiveClickHandler = useCallback(() => dispatch(changeTodoFilterAC(\"active\", props.todolistId)), [dispatch, props.todolistId]);\r\n    const onCompletedClickHandler = useCallback(() => dispatch(changeTodoFilterAC(\"completed\", props.todolistId)), [dispatch, props.todolistId]);\r\n\r\n    let tasksForRender = tasks;\r\n    if (todoList.filter === \"active\") tasksForRender = tasks.filter(t => t.status === TaskStatuses.New);\r\n    if (todoList.filter === \"completed\") tasksForRender = tasks.filter(t => t.status === TaskStatuses.Completed);\r\n\r\n    return <div className={'todoList'}>\r\n        <Typography align={'center'}>\r\n            <EditableSpan setNewTitle={changeTodolistTitle} title={props.title}/>\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </Typography>\r\n        <AddItemForm addItem={addTask}/>\r\n        <List>\r\n            {\r\n                tasksForRender && tasksForRender.map(t => {\r\n                    return <Task key={t.id} task={t} todolistId={props.todolistId}/>\r\n                })\r\n            }\r\n        </List>\r\n        <div>\r\n            <ButtonGroup variant={'contained'} size={'small'} disableElevation>\r\n                <Button color={todoList.filter === 'all' ? 'secondary' : 'primary'} onClick={onAllClickHandler}>All</Button>\r\n                <Button color={todoList.filter === 'active' ? 'secondary' : 'primary'} onClick={onActiveClickHandler}>Active</Button>\r\n                <Button color={todoList.filter === 'completed' ? 'secondary' : 'primary'} onClick={onCompletedClickHandler}>Completed</Button>\r\n            </ButtonGroup>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport {AddItemForm} from './Components/AddItemForm';\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {createTodoTC, getTodoTC, setTodoAC} from './state/todolists-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from './state/store';\r\nimport {Todolist1} from './Components/TodoList1';\r\nimport {TodoType} from './api/todolist-api';\r\n\r\nfunction App() {\r\n\r\n    const todoLists = useSelector<AppRootStateType, TodoType[]>(state => state.todolists)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(getTodoTC())\r\n    },[])\r\n\r\n    const addTodoList = useCallback((title: string) => {\r\n        dispatch(createTodoTC(title))\r\n    },[dispatch])\r\n\r\n    const todoListsComponents = todoLists.map(tl => {\r\n        return (\r\n            <Grid item key={tl.id}>\r\n                <Paper elevation={14} style={{padding: '10px'}}>\r\n                    <Todolist1\r\n                        todolistId={tl.id}\r\n                        title={tl.title}\r\n                    />\r\n                </Paper>\r\n            </Grid>\r\n        )\r\n    })\r\n    return (\r\n        <div className={'App'}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar style={{justifyContent: \"space-between\"}}>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography\r\n                        variant=\"h6\">\r\n                        Todolists\r\n                    </Typography>\r\n                    <Button color=\"inherit\" variant={\"outlined\"}>Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: '30px 0'}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                    <Grid container spacing={5}>\r\n                        {todoListsComponents}\r\n                    </Grid>\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","import {tasksReducer} from './tasks-reducer';\r\nimport {todolistsReducer} from './todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './App';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './state/store';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}