{"version":3,"sources":["Components/Error/ErrorPage.module.css","serviceWorker.ts","api/tasks-api.ts","state/auth-api.ts","utils/error-utils.ts","api/todolist-api.ts","state/todolists-reducer.ts","state/auth-reducer.ts","state/app-reducer.ts","state/tasks-reducer.ts","state/store.ts","Components/ErrorSnackbar/ErrorSnackbar.tsx","Components/AddItemForm/AddItemForm.tsx","EditableSpan.tsx","Components/AllTodo/Todolist/Task/Task.tsx","Components/AllTodo/Todolist/Todolist.tsx","Components/AllTodo/AllTodo.tsx","Components/Login/Login.tsx","Components/Error/Error.tsx","App.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","axiosInstance","axios","create","baseURL","withCredentials","headers","tasksAPI","tlId","get","then","res","data","title","post","taskId","delete","task","put","item","authAPI","handleServerAppError","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","error","message","todolistApi","id","changeTodoFilterAC","filter","type","initialState","initState","isLoggedIn","login","setIsLoggedIn","setUserLogin","status","isInit","setIsInitAC","updateTaskAC","taskID","model","todolistID","getTasksTC","tasks","setTasksAC","items","rootReducer","combineReducers","todolists","state","action","tl","map","todo","entityStatus","t","copy","todoListId","forEach","stateCopy","app","auth","store","createStore","applyMiddleware","thunk","useAppSelector","useSelector","Alert","React","forwardRef","props","ref","elevation","variant","ErrorSnackbar","useDispatch","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","AddItemForm","memo","useState","setTitle","setError","addItem","trimmedTitle","trim","TextField","disabled","helperText","label","value","onChange","e","currentTarget","onKeyPress","key","IconButton","size","onClick","AddOutlined","fontSize","EditableSpan","editMode","setEditMode","onEditMode","offEditMode","setNewTitle","style","onBlur","autoFocus","onDoubleClick","display","margin","Edit","Task","removeTaskCallback","useCallback","todolistId","changeTaskStatus","checked","Completed","New","getState","find","catch","err","changeTitle","changeTaskTitleTC","ListItem","padding","justifyContent","alignItems","className","Checkbox","color","Delete","Todolist","todoList","addTask","resultCode","createTaskTC","changeTodolistTitle","changeTodoTitleAC","changeTodoTitleTC","removeTodolist","changeTlEntityAC","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","tasksForRender","Typography","align","List","ButtonGroup","aria-label","disableElevation","Button","AllTodo","todoLists","useEffect","todos","addTodoList","addTodoAC","createTodoTC","todoListsComponents","Grid","Paper","container","spacing","to","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","a","console","log","resetForm","handleSubmit","FormControl","FormLabel","href","target","FormGroup","getFieldProps","touched","FormControlLabel","control","ErrorPage","s","header","App","AppBar","position","Toolbar","edge","Menu","LinearProgress","Container","fixed","path","element","top","textAlign","CircularProgress","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yFACAA,EAAOC,QAAU,CAAC,OAAS,4B,gICWPC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCQMC,EAOAC,E,gDA9BNC,EAAgBC,IAAMC,OAAO,CAC/BC,QAAQ,2DACRC,iBAAiB,EACjBC,QAAS,CACL,UAAW,0CAINC,EAAW,SACXC,GACL,OAAOP,EAAcQ,IAAd,UAA2CD,EAA3C,WAAyDE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SAF3EL,EAAW,SAITC,EAAcK,GACrB,OAAOZ,EAAca,KAAd,UAAuFN,EAAvF,UAAqG,CAACK,UAAQH,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SALhIL,EAAW,SAOTC,EAAcO,GACrB,OAAOd,EAAce,OAAd,UAAkCR,EAAlC,kBAAgDO,IAAUL,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SAR5EL,EAAW,SAUTC,EAAcO,EAAgBE,GACrC,OAAOhB,EAAciB,IAAd,UAAqFV,EAArF,kBAAmGO,GAAUE,GAAMP,MAAK,SAAAC,GAAG,OAAIA,EAAIC,KAAKA,KAAKO,U,SAIhJpB,O,aAAAA,I,2BAAAA,I,yBAAAA,I,kBAAAA,M,cAOAC,O,aAAAA,I,mBAAAA,I,eAAAA,I,uBAAAA,I,kBAAAA,M,kCC9BNC,EAAgBC,IAAMC,OAAO,CAC/BC,QAAQ,gDACRC,iBAAiB,EACjBC,QAAS,CACL,UAAW,0CAINc,EAAU,SACbR,GACF,OAAOX,EAAca,KAAd,aAAiGF,GAAMF,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SAFzHQ,EAAU,WAKf,OAAOnB,EAAcQ,IAAd,YALFW,EAAU,WAQf,OAAOnB,EAAce,OAAd,eCfFK,EAAuB,SAAIT,EAAuBU,GACvDV,EAAKW,SAASC,OACdF,EAASG,EAAcb,EAAKW,SAAS,KAErCD,EAASG,EAAc,uBAE3BH,EAASI,EAAe,YAGfC,EAA2B,SAACC,EAA0BN,GAC/DA,EAASG,EAAcG,EAAMC,UAC7BP,EAASI,EAAe,YCZtBzB,EAAgBC,IAAMC,OAAO,CAC/BC,QAAQ,gDACRC,iBAAiB,EACjBC,QAAS,CACL,UAAW,0CAINwB,EAAc,WAEnB,OAAO7B,EAAcQ,IAAd,eAFFqB,EAAc,SAIdjB,GACL,OAAOZ,EAAca,KAAd,aAAyG,CAACD,UAAQH,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SALpIkB,EAAc,SAOdC,GACL,OAAO9B,EAAce,OAAd,sBAAkDe,IAAMrB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SAR1EkB,EAAc,SAUTC,EAAYlB,GACtB,OAAOZ,EAAciB,IAAd,sBAA+Da,GAAM,CAAClB,WCJxEmB,EAAqB,SAACC,EAA0BF,GAA3B,MAA2C,CAACG,KAAM,qBAAsBD,SAAQF,OAc5GI,EAAiC,GC1BjCC,EAAY,CACdC,YAAY,EACZC,MAAO,MAmDEC,EAAgB,SAACF,GAAD,MAA0B,CAACH,KAAM,kBAAmBG,eACpEG,EAAe,SAACF,GAAD,MAA2B,CAACJ,KAAM,iBAAkBI,UCrD1EH,EAAe,CACjBM,OAAQ,OACRb,MAAO,KACPc,QAAQ,GAqCChB,EAAiB,SAACe,GAAD,MAAgC,CAACP,KAAM,iBAAkBO,WAC1EhB,EAAgB,SAACG,GAAD,MAA2B,CAACM,KAAM,gBAAiBN,UACnEe,EAAc,SAACD,GAAD,MAAsB,CAACR,KAAM,kBAAmBQ,WCnC9DE,EAAe,SAACC,EAAgBC,EAAsBC,GAAvC,MAA+D,CAACb,KAAM,oBAAqBW,SAAQC,QAAOC,eAiBhIZ,EAA+B,GAqCxBa,EAAa,SAACxC,GAAD,OACtB,SAACc,GACGA,EAASI,EAAe,YACxBnB,EAAkBC,GACbE,MAAK,SAAAC,GACFW,EAzDU,SAACd,EAAcyC,GAAf,MAAsC,CAACf,KAAM,kBAAmBe,QAAOzC,QAyDxE0C,CAAW1C,EAAMG,EAAIwC,a,iBCjExCC,EAAcC,YAAgB,CAChCC,UJyB4B,WAAqE,IAApEC,EAAmE,uDAA3DpB,EAAcqB,EAA6C,uCAChG,OAAQA,EAAOtB,MACX,IAAK,mBACD,OAAOqB,EAAMtB,QAAO,SAAAwB,GAAE,OAAIA,EAAG1B,KAAOyB,EAAOT,cAC/C,IAAK,gBACD,OAAOS,EAAOF,UAAUI,KAAI,SAAAD,GAAE,kCAASA,GAAT,IAAaxB,OAAQ,WACvD,IAAK,gBACD,MAAM,CAAN,2BAAYuB,EAAOG,MAAnB,IAAyB1B,OAAQ,MAAO2B,aAAc,UAAtD,mBAAkEL,IACtE,IAAK,yBACD,OAAO,YAAIA,EAAMG,KAAI,SAAAD,GAAE,OAAIA,EAAG1B,KAAOyB,EAAOzB,GAAjB,2BAA0B0B,GAA1B,IAA8B5C,MAAO2C,EAAO3C,QAAS4C,MACpF,IAAK,qBACD,OAAO,YAAIF,EAAMG,KAAI,SAAAD,GAAE,OAAIA,EAAG1B,KAAOyB,EAAOzB,GAAjB,2BAA0B0B,GAA1B,IAA8BxB,OAAQuB,EAAOvB,SAAUwB,MACtF,IAAK,qBACD,OAAOF,EAAMG,KAAI,SAAAD,GAAE,OAAIA,EAAG1B,KAAOyB,EAAOhD,KAAjB,2BAA4BiD,GAA5B,IAAgCG,aAAcJ,EAAOI,eAAgBH,KAChG,IAAK,kBACD,MAAO,GACX,QACI,OAAOF,IIzCfN,MDuBwB,WAAmE,IAAlEM,EAAiE,uDAAzDpB,EAAcqB,EAA2C,uCAC1F,OAAQA,EAAOtB,MACX,IAAK,oBACD,OAAO,2BAAIqB,GAAX,kBAAmBC,EAAOT,WAAaQ,EAAMC,EAAOT,YAAYd,QAAO,SAAA4B,GAAC,OAAIA,EAAE9B,KAAOyB,EAAOX,YAChG,IAAK,iBACD,IAAIiB,EAAI,eAAOP,GACXN,EAAQa,EAAKN,EAAOvC,KAAK8C,YAE7B,OADAD,EAAKN,EAAOvC,KAAK8C,YAAjB,CAAgCP,EAAOvC,MAAvC,mBAAgDgC,IACzCa,EAEX,IAAK,oBACD,OAAO,2BAAIP,GAAX,kBAAmBC,EAAOT,WAAaQ,EAAMC,EAAOT,YAAYW,KAAI,SAAAG,GAAC,OAAIL,EAAOX,SAAWgB,EAAE9B,GAApB,2BAA6B8B,GAAML,EAAOV,OAASe,OAChI,IAAK,qBACD,OAAO,2BAAIN,GAAX,kBAAmBC,EAAOT,WAAaQ,EAAMC,EAAOT,YAAYW,KAAI,SAAAG,GAAC,OAAIA,EAAE9B,KAAOyB,EAAOX,OAAhB,2BAA6BgB,GAA7B,IAAgChD,MAAO2C,EAAO3C,QAASgD,OACpI,IAAK,gBACD,IAAIC,EAAI,eAAOP,GAEf,OADAC,EAAOF,UAAUU,SAAQ,SAAAP,GAAE,OAAIK,EAAKL,EAAG1B,IAAM,MACtC+B,EAEX,IAAK,kBACD,OAAO,2BAAIP,GAAX,kBAAmBC,EAAOhD,KAAOgD,EAAOP,QAC5C,IAAK,mBACD,IAAIgB,EAAS,eAAOV,GAEpB,cADOU,EAAUT,EAAOT,YACjBkB,EAEX,IAAK,kBACD,MAAO,GACX,QACI,OAAOV,ICnDfW,IFIsB,WAAsF,IAArFX,EAAoF,uDAA1DpB,EAAcqB,EAA4C,uCAC3G,OAAQA,EAAOtB,MACX,IAAK,iBACD,OAAO,2BAAIqB,GAAX,IAAkBd,OAAQe,EAAOf,SACrC,IAAK,gBACD,OAAO,2BAAIc,GAAX,IAAkB3B,MAAO4B,EAAO5B,QACpC,IAAK,kBACD,OAAO,2BAAI2B,GAAX,IAAkBb,OAAQc,EAAOd,SACrC,QACI,OAAOa,IEZfY,KHCuB,WAAgE,IAA/DZ,EAA8D,uDAAtDnB,EAAWoB,EAA2C,uCACtF,OAAQA,EAAOtB,MACX,IAAK,kBACD,OAAO,2BAAIqB,GAAX,IAAkBlB,WAAYmB,EAAOnB,aACzC,IAAK,iBACD,OAAO,2BAAIkB,GAAX,IAAkBjB,MAAOkB,EAAOlB,QACpC,QACI,OAAOiB,MGLNa,EAAQC,YAAYjB,EAAakB,YAAgBC,MAGjDC,EAAyDC,IAMtE9E,OAAOyE,MAAQA,E,uHCjBTM,GAAQC,IAAMC,YAAuC,SACvDC,EAAOC,GACP,OAAO,eAAC,KAAD,aAAUC,UAAW,EAAGD,IAAKA,EAAKE,QAAQ,UAAaH,OAG3D,SAASI,KAAiB,IACtBrD,EAAS4C,GAAe,SAAAjB,GAAK,OAAIA,EAAMW,OAAvCtC,MACDN,EAAW4D,cAEXC,EAAc,SAACC,EAAsCC,GACxC,cAAXA,GAGJ/D,EAASG,EAAc,QAG3B,OACI,eAAC6D,GAAA,EAAD,CAAUC,KAAgB,OAAV3D,EAAgB4D,iBAAkB,IAAMC,QAASN,EAAjE,SACI,eAAC,GAAD,CAAOM,QAASN,EAAaO,SAAS,QAAQC,GAAI,CAACC,MAAO,QAA1D,SACKhE,M,qDCjBJiE,GAAclB,IAAMmB,MAAK,SAACjB,GAAiC,IAAD,EAC3CkB,mBAAiB,IAD0B,oBAC9DlF,EAD8D,KACvDmF,EADuD,OAEzCD,oBAAkB,GAFuB,oBAE5DnE,EAF4D,KAErDqE,EAFqD,KAc7DC,EAAU,WACZ,IAAMC,EAAetF,EAAMuF,OAC3BJ,EAAS,IACLG,EACAtB,EAAMqB,QAAQC,GAEdF,GAAS,IAIjB,OACI,iCACI,eAACI,GAAA,EAAD,CACIC,SAAUzB,EAAMyB,SAChB1E,MAAOA,EACP2E,WAAY3E,GAAS,oBACrB4E,MAAO,cACPC,MAAO5F,EACP6F,SA5BY,SAACC,GACrBX,EAASW,EAAEC,cAAcH,OACzBR,GAAS,IA2BDY,WAzBc,SAACF,GACT,UAAVA,EAAEG,KACFZ,OAyBA,eAACa,GAAA,EAAD,CAAYT,SAAUzB,EAAMyB,SAAUU,KAAM,QAASC,QAASf,EAA9D,SACI,eAACgB,GAAA,EAAD,CAAaC,SAAU,kB,UCnC1BC,GAAezC,IAAMmB,MAAK,SAACjB,GAA8B,IAAD,EAEjCkB,oBAAkB,GAFe,oBAE1DsB,EAF0D,KAEhDC,EAFgD,OAGvCvB,mBAAiBlB,EAAMhE,OAHgB,oBAG1DA,EAH0D,KAGnDmF,EAHmD,KAK3DuB,EAAa,kBAAMD,GAAY,IAC/BE,EAAc,WAChBF,GAAY,GACZzC,EAAM4C,YAAY5G,IAYtB,OACIwG,EAAW,eAAChB,GAAA,EAAD,CACHC,SAAUzB,EAAMyB,SAChBoB,MAAO,CAAC9B,MAAO,SACfa,MAAO5F,EACP8G,OAAQH,EACRI,WAAS,EAAClB,SAVF,SAACC,GACjBX,EAASW,EAAEC,cAAcH,QAUjBI,WAhBkB,SAACF,GACb,UAAVA,EAAEG,KACFU,OAeE,wBAAMK,cAAeN,EAAYG,MAAO,CAACI,QAAS,eAAgBC,OAAQ,cAA1E,UAA0FlD,EAAMhE,MAC9F,eAACkG,GAAA,EAAD,CAAYW,MAAO,CAACI,QAAS,gBACzBxB,SAAUzB,EAAMyB,SAAUU,KAAM,QAASC,QAASM,EADtD,SAEA,eAACS,GAAA,EAAD,CAAMb,SAAU,kB,8BC5BnBc,GAAOtD,IAAMmB,MAAK,SAACjB,GAE5B,IAAMvD,EAAW4D,cACXgD,EAAqBC,uBAAY,kBAAM7G,GL6DpBd,EK7D0CqE,EAAMuD,WL6DlCrH,EK7D8C8D,EAAM5D,KAAKc,GL8DhG,SAACT,GACGA,EAASI,EAAe,YACxBnB,EAAoBC,EAAMO,GACrBL,MAAK,SAAAC,GACFW,EAtEqD,CAACY,KAAM,oBAAqBW,OAsE3D9B,EAtEmEgC,WAsE3DvC,IAC9Bc,EAASI,EAAe,eANZ,IAAClB,EAAcO,IK5DnC,CAACO,EAAUuD,EAAM5D,KAAKc,GAAI8C,EAAMuD,aAC9BC,EAAmBF,uBAAY,SAACxB,GAClC,IL2F2BnG,EAAcO,EAAgB0B,EK3FrDgE,EAAQE,EAAEC,cAAc0B,QAAUvI,EAAawI,UAAYxI,EAAayI,IAC5ElH,GL0F2Bd,EK1FCqE,EAAMuD,WL0FOrH,EK1FK8D,EAAM5D,KAAKc,GL0FAU,EK1FIgE,EL2F1D,SAACnF,EAAUmH,GACdnH,EAASI,EAAe,YACxB,IAAMT,EAAOwH,IAAWxF,MAAMzC,GAAMkI,MAAK,SAAA7E,GAAC,OAAIA,EAAE9B,KAAOhB,KAEvD,GAAIE,EAAM,CACN,IAAI6B,EAAoB,2BAAO7B,GAAP,IAAawB,WACrClC,EAAoBC,EAAMO,EAAQ+B,GAC7BpC,MAAK,SAAAC,GACFW,EAASsB,EAAa7B,EAAQ+B,EAAOtC,IACrCc,EAASI,EAAe,YAE3BiH,OAAM,SAAAC,GACHjH,EAAyBiH,EAAKtH,YKtG3C,CAACA,EAAUuD,EAAM5D,KAAKc,GAAI8C,EAAMuD,aAE7BS,EAAcV,uBAAY,SAACtH,GAC7BS,EL0GyB,SAACd,EAAcO,EAAgBF,GAC5D,OAAO,SAACS,EAAUmH,GACdnH,EAASI,EAAe,YACxB,IAAMT,EAAOwH,IAAWxF,MAAMzC,GAAMkI,MAAK,SAAA7E,GAAC,OAAIA,EAAE9B,KAAOhB,KAEvD,GAAIE,EAAM,CACN,IAAI6B,EAAoB,2BAAO7B,GAAP,IAAaJ,UACrCN,EAAoBC,EAAMO,EAAQ+B,GAC7BpC,MAAK,SAAAC,GACFW,EAASsB,EAAa7B,EAAQ+B,EAAOtC,IACrCc,EAASI,EAAe,YAE3BiH,OAAM,SAAAC,GACHjH,EAAyBiH,EAAKtH,QKvHjCwH,CAAkBjE,EAAMuD,WAAYvD,EAAM5D,KAAKc,GAAIlB,MAC7D,CAACS,EAAUuD,EAAM5D,KAAKc,GAAI8C,EAAMuD,aACnC,OAAO,gBAACW,GAAA,EAAD,CACHrB,MAAO,CAACsB,QAAS,IAAKlB,QAAS,OAAQmB,eAAgB,iBACvDC,WAAY,SACZC,UAAWtE,EAAM5D,KAAKwB,SAAW1C,EAAawI,UAAY,UAAY,GAHnE,UAIH,eAACa,GAAA,EAAD,CACI1C,SAAU2B,EACVC,QAASzD,EAAM5D,KAAKwB,SAAW1C,EAAawI,UAC5Cc,MAAO,UACPrC,KAAM,UACV,eAACI,GAAD,CAAcK,YAAaoB,EAAahI,MAAOgE,EAAM5D,KAAKJ,QAC1D,eAACkG,GAAA,EAAD,CAAYC,KAAM,QAASC,QAASiB,EAApC,SACI,eAACoB,GAAA,EAAD,CAAQnC,SAAU,kB,oBCpBjBoC,GAAW5E,IAAMmB,MAAK,SAAUjB,GAEzC,IAAM2E,EAAWhF,GAAe,SAAAjB,GAAK,OAAIA,EAAMD,UAAUrB,QAAO,SAAAwB,GAAE,OAAIA,EAAG1B,KAAO8C,EAAMuD,cAAY,MAC5FnF,EAAQuB,GAAe,SAAAjB,GAAK,OAAIA,EAAMN,MAAM4B,EAAMuD,eAClD9G,EAAW4D,cAEXuE,EAAUtB,uBAAY,SAACtH,GACzBS,EN+DoB,SAACd,EAAcK,GAAf,OACxB,SAACS,GACGA,EAASI,EAAe,YACxBnB,EAAoBC,EAAMK,GACrBH,MAAK,SAAAC,GACqB,IAAnBA,EAAI+I,YACJpI,EAhF0B,CAACY,KAAM,iBAAkBjB,KAgFhCN,EAAIC,KAAKO,OAC5BG,EAASI,EAAe,WAEpBf,EAAIY,SAASC,OACbF,EAASG,EAAcd,EAAIY,SAAS,KAEpCD,EAASG,EAAc,uBAE3BH,EAASI,EAAe,eAG/BiH,OAAM,SAAAC,GACHtH,EAASG,EAAcmH,EAAI/G,UAC3BP,EAASI,EAAe,eMlFvBiI,CAAaH,EAASzH,GAAIlB,MACpC,CAACS,EAAUuD,EAAMuD,aAEdwB,EAAsBzB,uBAAY,SAACtH,GACrCS,ET+EyB,SAACd,EAAcK,GAAf,OAC7B,SAACS,GACGA,EAASI,EAAe,YACxBI,EAA0BtB,EAAMK,GAC3BH,MAAK,SAAAC,GACqB,IAAnBA,EAAI+I,YACJpI,EAhGa,SAACT,EAAekB,GAAhB,MAAgC,CAACG,KAAM,yBAA0BrB,QAAOkB,MAgG5E8H,CAAkBhJ,EAAOL,IAClCc,EAASI,EAAe,UAExBL,EAAqBV,EAAKW,MAGjCqH,OAAM,SAAAC,GAAG,OAAIjH,EAAyBiH,EAAKtH,OS3FvCwI,CAAkBjF,EAAMuD,WAAYvH,MAC9C,CAACS,EAAUuD,EAAMuD,aAEd2B,EAAiB5B,uBAAY,WT6CX,IAAC3H,ES5CrBc,GT4CqBd,ES5CCqE,EAAMuD,WT6ChC,SAAC9G,GACGA,EA3DwB,SAACd,EAAcoD,GAAf,MAC3B,CAAC1B,KAAM,qBAAsB1B,OAAMoD,aA0DA,WAAvBoG,CAAiBxJ,IAC1Bc,EAASI,EAAe,YACxBI,EAAqBtB,GAChBE,MAAK,SAAAC,GACqB,IAAnBA,EAAI+I,YACJpI,EArEqC,CAACY,KAAM,mBAAoBa,WAqEtCvC,IAC1Bc,EAASI,EAAe,UAExBL,EAAqBV,EAAKW,MAGjCqH,OAAM,SAAAC,GAAG,OAAIjH,EAAyBiH,EAAKtH,WSxDlD,CAACA,EAAUuD,EAAMuD,aAEb6B,EAAoB9B,uBAAY,kBAAM7G,EAASU,EAAmB,MAAO6C,EAAMuD,eAAc,CAAC9G,EAAUuD,EAAMuD,aAC9G8B,EAAuB/B,uBAAY,kBAAM7G,EAASU,EAAmB,SAAU6C,EAAMuD,eAAc,CAAC9G,EAAUuD,EAAMuD,aACpH+B,EAA0BhC,uBAAY,kBAAM7G,EAASU,EAAmB,YAAa6C,EAAMuD,eAAc,CAAC9G,EAAUuD,EAAMuD,aAE5HgC,EAAiBnH,EAIrB,MAHwB,WAApBuG,EAASvH,SAAqBmI,EAAiBnH,EAAMhB,QAAO,SAAA4B,GAAC,OAAIA,EAAEpB,SAAW1C,EAAayI,QACvE,cAApBgB,EAASvH,SAAwBmI,EAAiBnH,EAAMhB,QAAO,SAAA4B,GAAC,OAAIA,EAAEpB,SAAW1C,EAAawI,cAE3F,uBAAKY,UAAW,WAAhB,UACH,gBAACkB,GAAA,EAAD,CAAYC,MAAO,SAAnB,UACI,eAAClD,GAAD,CAAcd,SAAoC,YAA1BkD,EAAS5F,aAC7B6D,YAAamC,EAAqB/I,MAAOgE,EAAMhE,QACnD,eAACkG,GAAA,EAAD,CAAYT,SAAoC,YAA1BkD,EAAS5F,aAA4BqD,QAAS8C,EAApE,SACI,eAACT,GAAA,EAAD,SAGR,eAACzD,GAAD,CAAaS,SAAoC,YAA1BkD,EAAS5F,aAA4BsC,QAASuD,IACrE,eAACc,GAAA,EAAD,UAEQH,GAAkBA,EAAe1G,KAAI,SAAAG,GACjC,OAAO,eAACoE,GAAD,CAAiBhH,KAAM4C,EAAGuE,WAAYvD,EAAMuD,YAAjCvE,EAAE9B,SAIhC,+BACI,gBAACyI,GAAA,EAAD,CAAaxF,QAAS,WAAYyF,aAAY,sBAAuBC,kBAAgB,EAArF,UACI,eAACC,GAAA,EAAD,CAAQ3F,QAA6B,QAApBwE,EAASvH,OAAmB,YAAc,WACvDqE,SAAoC,YAA1BkD,EAAS5F,aAA4BqD,QAASgD,EAD5D,iBAEA,eAACU,GAAA,EAAD,CAAQ3F,QAA6B,WAApBwE,EAASvH,OAAsB,YAAc,WAC1DqE,SAAoC,YAA1BkD,EAAS5F,aAA4BqD,QAASiD,EAD5D,oBAEA,eAACS,GAAA,EAAD,CAAQ3F,QAA6B,cAApBwE,EAASvH,OAAyB,YAAc,WAC7DqE,SAAoC,YAA1BkD,EAAS5F,aAA4BqD,QAASkD,EAD5D,kC,SCtDHS,GAAU,WAEnB,IAAMC,EAAYpG,aAA0C,SAAAlB,GAAK,OAAIA,EAAMD,aACpEjB,EAAcmC,GAAe,SAAAjB,GAAK,OAAIA,EAAMY,QAA5C9B,WACDf,EAAW4D,cACjB4F,qBAAU,WACFzI,GAGJf,GVsCJ,SAACA,EAAUmH,GACPnH,EAASI,EAAe,YACxBI,IACKpB,MAAK,SAAAC,GACF,GAAGA,EAAIC,KAEH,OADAU,EA/CuC,CAACY,KAAM,gBAAiBoB,UA+C5C3C,EAAIC,OAChBD,EAAIC,QAGlBF,MAAK,SAAAqK,GACEA,IACAA,EAAM/G,SAAQ,SAAAP,GAAE,OAAInC,EAAS0B,EAAWS,EAAG1B,QAC3CT,EAASI,EAAe,aAG/BiH,OAAM,SAAAC,GAAG,OAAIjH,EAAyBiH,EAAKtH,WUpDjD,IAEH,IAAM0J,EAAc7C,uBAAY,SAACtH,GAC7BS,EVoEoB,SAACT,GAAD,OACxB,SAACS,GACGA,EAASI,EAAe,YACxBI,EAAqBjB,GAChBH,MAAK,SAAAC,GACqB,IAAnBA,EAAI+I,YACJpI,EAnFK,SAACT,EAAe8C,GAAhB,MAA0C,CAACzB,KAAM,gBAAiBrB,QAAO8C,QAmFrEsH,CAAUpK,EAAOF,EAAIC,KAAKO,OACnCG,EAASI,EAAe,UAExBL,EAAqBV,EAAKW,MAGjCqH,OAAM,SAAAC,GAAG,OAAIjH,EAAyBiH,EAAKtH,OUhFvC4J,CAAarK,MACvB,CAACS,IAEE6J,EAAsBN,EAAUnH,KAAI,SAAAD,GACtC,OACI,eAAC2H,GAAA,EAAD,CAAMjK,MAAI,EAAV,SACI,eAACkK,GAAA,EAAD,CAAOtG,UAAW,GAAI2C,MAAO,CAACsB,QAAS,QAAvC,SACI,eAACO,GAAD,CACInB,WAAY3E,EAAG1B,GACflB,MAAO4C,EAAG5C,WAJN4C,EAAG1B,OAW3B,OAAKM,EAKD,gBAAC+I,GAAA,EAAD,CAAME,WAAS,EAAC5D,MAAO,CAACsB,QAAS,UAAjC,UACI,eAACoC,GAAA,EAAD,CAAME,WAAS,EAAC5D,MAAO,CAACsB,QAAS,QAAjC,SACI,eAACnD,GAAD,CAAaK,QAAS8E,MAE1B,eAACI,GAAA,EAAD,CAAME,WAAS,EAACC,QAAS,EAAzB,SACKJ,OATF,eAAC,KAAD,CAAUK,GAAI,W,kDCzBhBC,GAAQ,WAEjB,IAAMnK,EAAW4D,cACV7C,EAAcmC,GAAe,SAAAjB,GAAK,OAAIA,EAAMY,QAA5C9B,WAEDqJ,EAASC,aAAU,CACrBC,cAAe,CACXC,MAAO,GACPC,SAAU,GACVC,YAAY,GAEhBC,SAAU,SAACC,GACP,IAAMC,EAAoD,GAa1D,OAXKD,EAAOJ,MAEA,4CAA4CM,KAAKF,EAAOJ,SAChEK,EAAOL,MAAQ,yBAFfK,EAAOL,MAAQ,WAKdI,EAAOH,SAEDG,EAAOH,SAAStK,QAAU,IACjC0K,EAAOJ,SAAW,yBAFlBI,EAAOJ,SAAW,uBAIfI,GAEXE,SAAU,SAAAH,GVnBK,IAACrL,EUoBZU,GVpBYV,EUoBKqL,EVpBN,uCAAsC,WAAO3K,GAAP,eAAA+K,EAAA,6DACzD/K,EAASI,EAAe,YADiC,kBAGrCN,EAAcR,GAHuB,OAGjDD,EAHiD,OAIrD2L,QAAQC,IAAI5L,GACW,IAAnBA,EAAI+I,YACJpI,EAASiB,GAAc,IACvBjB,EAASI,EAAe,gBAExBL,EAAqBV,EAAKW,GAC1BA,EAASI,EAAe,YAVyB,gDAarDC,EAAyB,EAAD,GAAML,GAbuB,yDAAtC,wDUqBXoK,EAAOc,eAIf,OAAInK,EACO,eAAC,KAAD,CAAUmJ,GAAI,MAGlB,eAACJ,GAAA,EAAD,CAAME,WAAS,EAACrC,eAAgB,SAAhC,SACH,eAACmC,GAAA,EAAD,CAAMjK,MAAI,EAAC8H,eAAgB,SAA3B,SACI,uBAAMmD,SAAUV,EAAOe,aAAvB,SACI,gBAACC,GAAA,EAAD,WACI,gBAACC,GAAA,EAAD,WACI,0DACI,oBAAGC,KAAM,wCACLC,OAAQ,SADZ,sBAIJ,yEACA,2DACA,mDAEJ,gBAACC,GAAA,EAAD,WACI,eAACzG,GAAA,EAAD,aACIG,MAAM,QACNuB,OAAO,UACH2D,EAAOqB,cAAc,WAE5BrB,EAAOsB,QAAQnB,OAChBH,EAAOQ,OAAOL,OACd,sBAAKnE,MAAO,CAAC2B,MAAO,QAApB,SAA8BqC,EAAOQ,OAAOL,QAC5C,eAACxF,GAAA,EAAD,aACInE,KAAK,WACLsE,MAAM,WACNuB,OAAO,UACH2D,EAAOqB,cAAc,cAE5BrB,EAAOsB,QAAQlB,UAChBJ,EAAOQ,OAAOJ,UACd,sBAAKpE,MAAO,CAAC2B,MAAO,QAApB,SAA8BqC,EAAOQ,OAAOJ,WAC5C,eAACmB,GAAA,EAAD,CACIzG,MAAO,cACP0G,QAAS,eAAC9D,GAAA,EAAD,eACDsC,EAAOqB,cAAc,kBAGjC,eAACpC,GAAA,EAAD,CAAQzI,KAAM,SAAU8C,QAAS,YAAaqE,MAAO,UAArD,gC,qBCzFX8D,GAAY,WACrB,OAAO,sBAAKhE,UAAWiE,KAAEC,OAAlB,SACH,yDC2DOC,OAjDf,WAAgB,IAAD,EAEc9I,GAAe,SAAAjB,GAAK,OAAIA,EAAMW,OAAhDzB,EAFI,EAEJA,OAAQC,EAFJ,EAEIA,OACTpB,EAAW4D,cAHN,EAIiBV,GAAe,SAAAjB,GAAK,OAAIA,EAAMY,QAAnD9B,EAJI,EAIJA,WAAYC,EAJR,EAIQA,MAQnB,OANAwI,qBAAU,WACNxJ,EXOiB,uCAAiB,WAAOA,GAAP,eAAA+K,EAAA,6DACtC/K,EAASI,EAAe,YADc,kBAGlBN,IAHkB,OAIN,KADxBT,EAH8B,QAI1BC,KAAK8I,YACTpI,EAASkB,EAAa7B,EAAIC,KAAKA,KAAK0B,QACpChB,EAASiB,GAAc,IACvBjB,EAASI,EAAe,gBAExBL,EAAqBV,EAAIC,KAAMU,GAC/BA,EAASI,EAAe,YAVM,gDAalCC,EAAyB,EAAD,GAAIL,GAbM,yBAelCA,EAASqB,GAAY,IAfa,4EAAjB,yDWNlB,IAIED,EAQD,uBAAKyG,UAAW,MAAhB,UACI,eAACoE,EAAA,EAAD,CAAQC,SAAS,SAAjB,SACI,gBAACC,GAAA,EAAD,CAAS/F,MAAO,CAACuB,eAAgB,iBAAjC,UACI,eAAClC,GAAA,EAAD,CAAY2G,KAAK,QAAQrE,MAAM,UAAUoB,aAAW,OAApD,SACI,eAACkD,EAAA,EAAD,MAEJ,eAACtD,GAAA,EAAD,CACIrF,QAAQ,KADZ,uBAIC3C,GAAc,iCACX,uBAAMqF,MAAO,CAACsB,QAAS,QAAvB,SAAiC1G,IAAa,eAACqI,GAAA,EAAD,CAAQ1D,QArBpD,kBAAM3F,EZiBR,uCAAiB,WAAOA,GAAP,eAAA+K,EAAA,6DACrC/K,EAASI,EAAe,YADa,kBAGjBN,IAHiB,OAIL,KADxBT,EAH6B,QAIzBC,KAAK8I,YACTpI,EAASiB,GAAc,IACvBjB,EAASI,EAAe,cACxBJ,EAASkB,EAAa,OACtBlB,ED5B0B,CAACY,KAAM,sBC8BjCb,EAAqBV,EAAIC,KAAMU,GAC/BA,EAASI,EAAe,YAXK,gDAcjCC,EAAyB,EAAD,GAAIL,GAdK,yDAAjB,wDYI8E+H,MAAM,UAAUrE,QAAS,WAAzD,4BAI9C,YAAXvC,GAAwB,eAACmL,GAAA,EAAD,IACzB,eAACC,GAAA,EAAD,CAAWC,OAAK,EAAhB,SACI,gBAAC,KAAD,WACI,eAAC,KAAD,CAAOC,KAAM,IAAKC,QAAS,eAAC,GAAD,MAC3B,eAAC,KAAD,CAAOD,KAAM,SAAUC,QAAS,eAAC,GAAD,MAChC,eAAC,KAAD,CAAOD,KAAM,cAAeC,QAAS,eAAC,GAAD,MACrC,eAAC,KAAD,CAAOD,KAAM,IAAKC,QAAS,eAAC,KAAD,CAAUxC,GAAI,uBAGjD,eAACvG,GAAD,OA/BG,sBACHyC,MAAO,CAAC8F,SAAU,QAASS,IAAK,MAAOC,UAAW,SAAUtI,MAAO,QADhE,SAEH,eAACuI,EAAA,EAAD,O,SCpBZC,IAASC,OACL,eAAC,IAAD,CAAUjK,MAAOA,EAAjB,SACI,eAAC,KAAD,UACI,eAAC,GAAD,QAEKkK,SAASC,eAAe,SnB6HnC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhO,MAAK,SAAAiO,GACJA,EAAaC,gBAEdjG,OAAM,SAAA/G,GACL0K,QAAQ1K,MAAMA,EAAMC,c","file":"static/js/main.355b0ef2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"ErrorPage_header__1_mKy\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios, {AxiosResponse} from 'axios';\r\nimport {ResponseType} from './todolist-api';\r\n\r\nconst axiosInstance = axios.create({\r\n    baseURL: `https://social-network.samuraijs.com/api/1.1/todo-lists/`,\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'ecad3ae6-8083-4154-b722-6cea4b99f288'\r\n    }\r\n})\r\n\r\nexport const tasksAPI = {\r\n    getTasks(tlId: string) {\r\n        return axiosInstance.get<Response<TaskType[]>>(`${tlId}/tasks`).then(res => res.data)\r\n    },\r\n    createTask(tlId: string, title: string) {\r\n        return axiosInstance.post<{title: string},AxiosResponse<ResponseType<{ item: TaskType }>>>(`${tlId}/tasks`, {title}).then(res => res.data)\r\n    },\r\n    deleteTask(tlId: string, taskId: string) {\r\n        return axiosInstance.delete<Response>(`${tlId}/tasks/${taskId}`).then(res => res.data)\r\n    },\r\n    updateTask(tlId: string, taskId: string, task: TaskModelType) {\r\n        return axiosInstance.put<TaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`${tlId}/tasks/${taskId}`, task).then(res => res.data.data.item)\r\n    }\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3,\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    High = 2,\r\n    Urgently = 3,\r\n    Later = 4,\r\n}\r\n\r\nexport type TaskType = {\r\n    title: string,\r\n    description: string,\r\n    status: TaskStatuses,\r\n    priority: number,\r\n    startDate: string,\r\n    deadline: string,\r\n    id: string,\r\n    todoListId: string,\r\n    order: string,\r\n    addedDate: string,\r\n}\r\n\r\nexport type TaskModelType = {\r\n    title: string,\r\n    description: string,\r\n    status: TaskStatuses,\r\n    priority: TaskPriorities,\r\n    startDate: string,\r\n    deadline: string,\r\n}\r\n\r\ntype Response<D = {}> = {\r\n    items: D,\r\n    error: string[],\r\n    totalCount: number\r\n}","import axios, {AxiosResponse} from 'axios';\r\nimport {ResponseType} from '../api/todolist-api';\r\n\r\nconst axiosInstance = axios.create({\r\n    baseURL: `https://social-network.samuraijs.com/api/1.1/`,\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'ecad3ae6-8083-4154-b722-6cea4b99f288'\r\n    }\r\n})\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return axiosInstance.post<LoginParamsType, AxiosResponse<ResponseType<{userId: number}>>>(`auth/login`, data).then(res => res.data)\r\n    },\r\n    me() {\r\n        return axiosInstance.get<ResponseType<LoggedUserDataType>>(`auth/me`)\r\n    },\r\n    logout() {\r\n        return axiosInstance.delete<ResponseType>(`auth/login`)\r\n    },\r\n}\r\n\r\nexport type LoggedUserDataType = {\r\n    id: number,\r\n    login: string,\r\n    email: string,\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe?: boolean,\r\n    captcha?: string,\r\n}","import {ResponseType} from '../api/todolist-api';\r\nimport {Dispatch} from 'redux';\r\nimport {setAppErrorAC, SetAppErrorType, setAppStatusAC, SetAppStatusType} from '../state/app-reducer';\r\n\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occured'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: {message: string}, dispatch: ErrorUtilsDispatchType) => {\r\n    dispatch(setAppErrorAC(error.message))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport type ErrorUtilsDispatchType = Dispatch<SetAppErrorType | SetAppStatusType>","import axios, {AxiosResponse} from 'axios';\r\nimport {TodoDomainType} from '../state/todolists-reducer';\r\n\r\nconst axiosInstance = axios.create({\r\n    baseURL: `https://social-network.samuraijs.com/api/1.1/`,\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'ecad3ae6-8083-4154-b722-6cea4b99f288'\r\n    }\r\n})\r\n\r\nexport const todolistApi = {\r\n    getTLs() {\r\n        return axiosInstance.get<TodoDomainType[]>(`todo-lists`)\r\n    },\r\n    createTL(title: string) {\r\n        return axiosInstance.post<{title: string}, AxiosResponse<ResponseType<{ item: TodoDomainType }>>>(`todo-lists`, {title}).then(res => res.data)\r\n    },\r\n    deleteTL(id: string) {\r\n        return axiosInstance.delete<ResponseType>(`/todo-lists/${id}`).then(res => res.data)\r\n    },\r\n    updateTLTitle(id: string, title: string) {\r\n        return axiosInstance.put<{title: string},ResponseType>(`/todo-lists/${id}`, {title})\r\n    },\r\n}\r\n\r\nexport type TodoType = {\r\n    id: string,\r\n    title: string,\r\n    addedDate: string,\r\n    order: number,\r\n}\r\n\r\nexport type ResponseType<T = {}> = {\r\n    fieldsErrors?: string[],\r\n    messages: string[],\r\n    resultCode: number,\r\n    data: T\r\n}","import {ThunkType} from './store';\r\nimport {todolistApi, TodoType} from '../api/todolist-api';\r\nimport {RequestStatusType, setAppStatusAC} from './app-reducer';\r\nimport {handleServerAppError, handleServerNetworkError} from '../utils/error-utils';\r\nimport {getTasksTC} from './tasks-reducer';\r\n\r\nexport type RemoveTodoListAT = ReturnType<typeof removeTodolistAC>\r\nexport type setTodoAT = ReturnType<typeof setTodoAC>\r\ntype ChangeTodoTitleAT = ReturnType<typeof changeTodoTitleAC>\r\ntype ChangeTodoFilterAT = ReturnType<typeof changeTodoFilterAC>\r\ntype AddTodoAT = ReturnType<typeof addTodoAC>\r\ntype ChangeEntityType = ReturnType<typeof changeTlEntityAC>\r\nexport type ClearTodoDataAT = ReturnType<typeof clearTodoDataAC>\r\n\r\nexport const removeTodolistAC = (todolistID: string) => ({type: 'TODO/REMOVE-TODO', todolistID} as const)\r\nexport const addTodoAC = (title: string, todo: TodoDomainType) => ({type: 'TODO/ADD-TODO', title, todo} as const)\r\nexport const setTodoAC = (todolists: TodoDomainType[]) => ({type: 'TODO/SET-TODO', todolists} as const)\r\nexport const changeTodoTitleAC = (title: string, id: string) => ({type: 'TODO/CHANGE-TODO-TITLE', title, id} as const)\r\nexport const changeTodoFilterAC = (filter: FilterValuesType, id: string) => ({type: 'TODO/CHANGE-FILTER', filter, id} as const)\r\nexport const changeTlEntityAC = (tlId: string, entityStatus: RequestStatusType) =>\r\n    ({type: 'TODO/CHANGE-ENTITY', tlId, entityStatus} as const)\r\nexport const clearTodoDataAC = () => ({type: 'TODO/CLEAR-DATA'} as const)\r\n\r\nexport type TodoActionType = RemoveTodoListAT | setTodoAT | ChangeTodoTitleAT\r\n    | ChangeTodoFilterAT | AddTodoAT | ChangeEntityType | ClearTodoDataAT\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodoDomainType = TodoType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nconst initialState: TodoDomainType[] = []\r\n\r\nexport const todolistsReducer = (state = initialState, action: TodoActionType): TodoDomainType[] => {\r\n    switch (action.type) {\r\n        case 'TODO/REMOVE-TODO':\r\n            return state.filter(tl => tl.id !== action.todolistID);\r\n        case 'TODO/SET-TODO':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all'}));\r\n        case 'TODO/ADD-TODO':\r\n            return [{...action.todo, filter: 'all', entityStatus: 'idle'}, ...state]\r\n        case 'TODO/CHANGE-TODO-TITLE':\r\n            return [...state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)];\r\n        case 'TODO/CHANGE-FILTER':\r\n            return [...state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)]\r\n        case 'TODO/CHANGE-ENTITY':\r\n            return state.map(tl => tl.id === action.tlId ? {...tl, entityStatus: action.entityStatus} : tl)\r\n        case 'TODO/CLEAR-DATA':\r\n            return [];\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// THUNK\r\n\r\nexport const getTodoTC = (): ThunkType =>\r\n    (dispatch, getState) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistApi.getTLs()\r\n            .then(res => {\r\n                if(res.data) {\r\n                    dispatch(setTodoAC(res.data))\r\n                    return res.data\r\n                }\r\n            })\r\n            .then(todos => {\r\n                if (todos) {\r\n                    todos.forEach(tl => dispatch(getTasksTC(tl.id)))\r\n                    dispatch(setAppStatusAC('idle'))\r\n                }\r\n            })\r\n            .catch(err => handleServerNetworkError(err, dispatch))\r\n    }\r\n\r\nexport const removeTodoTC = (tlId: string): ThunkType =>\r\n    (dispatch) => {\r\n        dispatch(changeTlEntityAC(tlId, 'loading'))\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistApi.deleteTL(tlId)\r\n            .then(res => {\r\n                if (res.resultCode === 0) {\r\n                    dispatch(removeTodolistAC(tlId))\r\n                    dispatch(setAppStatusAC('idle'))\r\n                } else {\r\n                    handleServerAppError(res, dispatch)\r\n                }\r\n            })\r\n            .catch(err => handleServerNetworkError(err, dispatch))\r\n    }\r\n\r\nexport const createTodoTC = (title: string): ThunkType =>\r\n    (dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistApi.createTL(title)\r\n            .then(res => {\r\n                if (res.resultCode === 0) {\r\n                    dispatch(addTodoAC(title, res.data.item))\r\n                    dispatch(setAppStatusAC('idle'))\r\n                } else {\r\n                    handleServerAppError(res, dispatch)\r\n                }\r\n            })\r\n            .catch(err => handleServerNetworkError(err, dispatch))\r\n    }\r\n\r\nexport const changeTodoTitleTC = (tlId: string, title: string): ThunkType =>\r\n    (dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistApi.updateTLTitle(tlId, title)\r\n            .then(res => {\r\n                if (res.resultCode === 0) {\r\n                    dispatch(changeTodoTitleAC(title, tlId))\r\n                    dispatch(setAppStatusAC('idle'))\r\n                } else {\r\n                    handleServerAppError(res, dispatch)\r\n                }\r\n            })\r\n            .catch(err => handleServerNetworkError(err, dispatch))\r\n    }","import {ThunkType} from './store';\r\nimport {authAPI, LoginParamsType} from './auth-api';\r\nimport {setAppStatusAC} from './app-reducer';\r\nimport {handleServerAppError, handleServerNetworkError} from '../utils/error-utils';\r\nimport {clearTodoDataAC} from './todolists-reducer';\r\n\r\nconst initState = {\r\n    isLoggedIn: false,\r\n    login: null as string | null,\r\n}\r\n\r\ntype InitStateType = typeof initState\r\n\r\nexport const authReducer = (state = initState, action: AuthActionsType): InitStateType => {\r\n    switch (action.type) {\r\n        case 'AUTH/SET-LOGGED':\r\n            return {...state, isLoggedIn: action.isLoggedIn}\r\n        case 'AUTH/SET-LOGIN':\r\n            return {...state, login: action.login}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const loginTC = (data: LoginParamsType): ThunkType => async (dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        let res = await authAPI.login(data)\r\n        console.log(res)\r\n        if (res.resultCode === 0) {\r\n            dispatch(setIsLoggedIn(true))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } else {\r\n            handleServerAppError(res, dispatch)\r\n            dispatch(setAppStatusAC('failed'))\r\n        }\r\n    } catch (err: any) {\r\n        handleServerNetworkError(err, dispatch)\r\n    }\r\n}\r\n\r\nexport const logoutTC = (): ThunkType => async (dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        let res = await authAPI.logout()\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedIn(false))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(setUserLogin(null))\r\n            dispatch(clearTodoDataAC())\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n            dispatch(setAppStatusAC('failed'))\r\n        }\r\n    } catch (e: any) {\r\n        handleServerNetworkError(e, dispatch)\r\n    }\r\n}\r\n\r\nexport const setIsLoggedIn = (isLoggedIn: boolean) => ({type: 'AUTH/SET-LOGGED', isLoggedIn} as const)\r\nexport const setUserLogin = (login: string | null) => ({type: 'AUTH/SET-LOGIN', login} as const)\r\n\r\ntype SetIsLoggedInAT = ReturnType<typeof setIsLoggedIn>\r\ntype SetLoginAT = ReturnType<typeof setUserLogin>\r\n\r\nexport type AuthActionsType = SetIsLoggedInAT | SetLoginAT","import {ThunkType} from './store';\r\nimport {authAPI} from './auth-api';\r\nimport {handleServerAppError, handleServerNetworkError} from '../utils/error-utils';\r\nimport {setIsLoggedIn, setUserLogin} from './auth-reducer';\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as string | null,\r\n    isInit: false\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: AppActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case 'APP/SET-IS-INIT':\r\n            return {...state, isInit: action.isInit}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const initAppTC = (): ThunkType => async (dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        let res = await authAPI.me()\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setUserLogin(res.data.data.login))\r\n            dispatch(setIsLoggedIn(true))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n            dispatch(setAppStatusAC('failed'))\r\n        }\r\n    } catch (e: any) {\r\n        handleServerNetworkError(e, dispatch)\r\n    } finally {\r\n        dispatch(setIsInitAC(true))\r\n    }\r\n}\r\n\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setIsInitAC = (isInit: boolean) => ({type: 'APP/SET-IS-INIT', isInit} as const)\r\n\r\nexport type SetAppStatusType = ReturnType<typeof setAppStatusAC>\r\nexport type SetAppErrorType = ReturnType<typeof setAppErrorAC>\r\nexport type SetIsInitAT = ReturnType<typeof setIsInitAC>\r\n\r\nexport type AppActionType = SetAppStatusType | SetAppErrorType | SetIsInitAT","import {TaskModelType, tasksAPI, TaskStatuses, TaskType} from '../api/tasks-api';\r\nimport {ClearTodoDataAT, RemoveTodoListAT, setTodoAT} from './todolists-reducer';\r\nimport {ThunkType} from './store';\r\nimport {setAppErrorAC, setAppStatusAC} from './app-reducer';\r\nimport {handleServerNetworkError} from '../utils/error-utils';\r\n\r\nexport type RemoveTaskAT = ReturnType<typeof removeTaskAC>\r\nexport type AddTaskAT = ReturnType<typeof addTaskAC>\r\nexport type updateTaskAT = ReturnType<typeof updateTaskAC>\r\nexport type ChangeTaskTitleAT = ReturnType<typeof changeTaskTitleAC>\r\nexport type SetTasksAT = ReturnType<typeof setTasksAC>\r\n\r\nexport const removeTaskAC = (taskID: string, todolistID: string) => ({type: 'TASKS/REMOVE-TASK', taskID, todolistID} as const)\r\nexport const addTaskAC = (task: TaskType) => ({type: 'TASKS/ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskID: string, model: TaskModelType, todolistID: string) => ({type: 'TASKS/UPDATE-TASK', taskID, model, todolistID} as const)\r\nexport const changeTaskTitleAC = (taskID: string, title: string, todolistID: string) => ({type: 'TASKS/CHANGE-TITLE', taskID, title, todolistID} as const)\r\nexport const setTasksAC = (tlId: string, tasks: TaskType[]) => ({type: 'TASKS/SET-TASKS', tasks, tlId} as const)\r\n\r\nexport type TaskActionType = RemoveTaskAT\r\n    | AddTaskAT\r\n    | updateTaskAT\r\n    | ChangeTaskTitleAT\r\n    | setTodoAT\r\n    | RemoveTodoListAT\r\n    | SetTasksAT\r\n    | ClearTodoDataAT\r\n\r\ntype TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state = initialState, action: TaskActionType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'TASKS/REMOVE-TASK':\r\n            return {...state, [action.todolistID]: state[action.todolistID].filter(t => t.id !== action.taskID)};\r\n        case 'TASKS/ADD-TASK': {\r\n            let copy = {...state}\r\n            let tasks = copy[action.task.todoListId]\r\n            copy[action.task.todoListId] = [action.task, ...tasks]\r\n            return copy\r\n        }\r\n        case 'TASKS/UPDATE-TASK':\r\n            return {...state, [action.todolistID]: state[action.todolistID].map(t => action.taskID === t.id ? {...t, ...action.model} : t)}\r\n        case 'TASKS/CHANGE-TITLE':\r\n            return {...state, [action.todolistID]: state[action.todolistID].map(t => t.id === action.taskID ? {...t, title: action.title} : t)}\r\n        case 'TODO/SET-TODO': {\r\n            let copy = {...state}\r\n            action.todolists.forEach(tl => copy[tl.id] = [])\r\n            return copy\r\n        }\r\n        case 'TASKS/SET-TASKS':\r\n            return {...state, [action.tlId]: action.tasks}\r\n        case 'TODO/REMOVE-TODO': {\r\n            let stateCopy = {...state}\r\n            delete stateCopy[action.todolistID]\r\n            return stateCopy\r\n        }\r\n        case 'TODO/CLEAR-DATA':\r\n            return {};\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// THUNK\r\n\r\nexport const getTasksTC = (tlId: string): ThunkType =>\r\n    (dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        tasksAPI.getTasks(tlId)\r\n            .then(res => {\r\n                dispatch(setTasksAC(tlId, res.items))\r\n            })\r\n    }\r\n\r\nexport const deleteTaskTC = (tlId: string, taskId: string): ThunkType =>\r\n    (dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        tasksAPI.deleteTask(tlId, taskId)\r\n            .then(res => {\r\n                dispatch(removeTaskAC(taskId, tlId))\r\n                dispatch(setAppStatusAC('idle'))\r\n            })\r\n    }\r\n\r\nexport const createTaskTC = (tlId: string, title: string): ThunkType =>\r\n    (dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        tasksAPI.createTask(tlId, title)\r\n            .then(res => {\r\n                if (res.resultCode === 0) {\r\n                    dispatch(addTaskAC(res.data.item))\r\n                    dispatch(setAppStatusAC('idle'))\r\n                } else {\r\n                    if (res.messages.length) {\r\n                        dispatch(setAppErrorAC(res.messages[0]))\r\n                    } else {\r\n                        dispatch(setAppErrorAC('Some error occured'))\r\n                    }\r\n                    dispatch(setAppStatusAC('failed'))\r\n                }\r\n            })\r\n            .catch(err => {\r\n                dispatch(setAppErrorAC(err.message))\r\n                dispatch(setAppStatusAC('failed'))\r\n            })\r\n    }\r\n\r\nexport const updateTaskStatusTC = (tlId: string, taskId: string, status: TaskStatuses): ThunkType => {\r\n    return (dispatch, getState) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        const task = getState().tasks[tlId].find(t => t.id === taskId)\r\n\r\n        if (task) {\r\n            let model: TaskModelType = {...task, status}\r\n            tasksAPI.updateTask(tlId, taskId, model)\r\n                .then(res => {\r\n                    dispatch(updateTaskAC(taskId, model, tlId))\r\n                    dispatch(setAppStatusAC('idle'))\r\n                })\r\n                .catch(err => {\r\n                    handleServerNetworkError(err, dispatch)\r\n                })\r\n\r\n        }\r\n    }\r\n}\r\n\r\nexport const changeTaskTitleTC = (tlId: string, taskId: string, title: string): ThunkType => {\r\n    return (dispatch, getState) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        const task = getState().tasks[tlId].find(t => t.id === taskId)\r\n\r\n        if (task) {\r\n            let model: TaskModelType = {...task, title}\r\n            tasksAPI.updateTask(tlId, taskId, model)\r\n                .then(res => {\r\n                    dispatch(updateTaskAC(taskId, model, tlId))\r\n                    dispatch(setAppStatusAC('idle'))\r\n                })\r\n                .catch(err => {\r\n                    handleServerNetworkError(err, dispatch)\r\n                })\r\n        }\r\n    }\r\n}","import {TaskActionType, tasksReducer} from './tasks-reducer';\r\nimport {TodoActionType, todolistsReducer} from './todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk, {ThunkAction} from 'redux-thunk';\r\nimport {TypedUseSelectorHook, useSelector} from 'react-redux';\r\nimport {AppActionType, appReducer} from './app-reducer';\r\nimport {AuthActionsType, authReducer} from './auth-reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    todolists: todolistsReducer,\r\n    tasks: tasksReducer,\r\n    app: appReducer,\r\n    auth: authReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\ntype AppRootActionType = TodoActionType | TaskActionType | AppActionType | AuthActionsType\r\nexport const useAppSelector: TypedUseSelectorHook<AppRootStateType> = useSelector\r\nexport type ThunkType = ThunkAction<void, AppRootStateType, unknown, AppRootActionType>\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport {useAppSelector} from '../../state/store';\r\nimport {useDispatch} from 'react-redux';\r\nimport {setAppErrorAC} from '../../state/app-reducer';\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport function ErrorSnackbar() {\r\n    const {error} = useAppSelector(state => state.app)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={5000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@mui/material';\r\nimport {AddOutlined} from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\r\n    let [title, setTitle] = useState<string>(\"\")\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        setError(false)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    const addItem = () => {\r\n        const trimmedTitle = title.trim();\r\n        setTitle(\"\");\r\n        if (trimmedTitle) {\r\n            props.addItem(trimmedTitle);\r\n        } else {\r\n            setError(true);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                disabled={props.disabled}\r\n                error={error}\r\n                helperText={error && 'Title is required'}\r\n                label={'Enter title'}\r\n                value={title}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n            />\r\n            <IconButton disabled={props.disabled} size={'small'} onClick={addItem}>\r\n                <AddOutlined fontSize={'large'}/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@mui/material';\r\nimport {Edit} from '@mui/icons-material';\r\n\r\ntype EditableSpanProps = {\r\n    title: string\r\n    setNewTitle: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanProps) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(props.title)\r\n\r\n    const onEditMode = () => setEditMode(true)\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.setNewTitle(title)\r\n    }\r\n\r\n    const onKeyPressOffEditMode = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter')\r\n            offEditMode()\r\n    }\r\n\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        editMode ? <TextField\r\n                disabled={props.disabled}\r\n                style={{width: '148px'}}\r\n                value={title}\r\n                onBlur={offEditMode}\r\n                autoFocus onChange={changeTitle}\r\n                onKeyPress={onKeyPressOffEditMode}/>\r\n            : <span onDoubleClick={onEditMode} style={{display: 'inline-block', margin: '0 auto 0 0'}}>{props.title}\r\n                <IconButton style={{display: 'inline-block'}}\r\n                    disabled={props.disabled} size={'small'} onClick={onEditMode}>\r\n                <Edit fontSize={'small'}/>\r\n            </IconButton>\r\n        </span>\r\n    )\r\n})","import {useDispatch} from 'react-redux';\r\nimport {deleteTaskTC, updateTaskStatusTC, changeTaskTitleTC} from '../../../../state/tasks-reducer';\r\nimport React, {ChangeEvent, useCallback} from 'react';\r\nimport {EditableSpan} from '../../../../EditableSpan';\r\nimport {TaskStatuses, TaskType} from '../../../../api/tasks-api';\r\nimport {Checkbox, IconButton, ListItem} from '@mui/material';\r\nimport {Delete} from '@mui/icons-material';\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType,\r\n    todolistId: string,\r\n}\r\n\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n\r\n    const dispatch = useDispatch()\r\n    const removeTaskCallback = useCallback(() => dispatch(deleteTaskTC(props.todolistId, props.task.id)),\r\n        [dispatch, props.task.id, props.todolistId])\r\n    const changeTaskStatus = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let value = e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New\r\n        dispatch(updateTaskStatusTC(props.todolistId, props.task.id, value))\r\n    }, [dispatch, props.task.id, props.todolistId])\r\n\r\n    const changeTitle = useCallback((title: string) => {\r\n        dispatch(changeTaskTitleTC(props.todolistId, props.task.id, title))\r\n    }, [dispatch, props.task.id, props.todolistId])\r\n    return <ListItem\r\n        style={{padding: '0', display: 'flex', justifyContent: 'space-between'}}\r\n        alignItems={'center'}\r\n        className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            onChange={changeTaskStatus}\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color={'primary'}\r\n            size={'small'}/>\r\n        <EditableSpan setNewTitle={changeTitle} title={props.task.title}/>\r\n        <IconButton size={'small'} onClick={removeTaskCallback}>\r\n            <Delete fontSize={'small'}/>\r\n        </IconButton>\r\n    </ListItem>\r\n})","import React, {useCallback, useEffect} from 'react';\r\nimport {TaskStatuses, TaskType} from '../../../api/tasks-api';\r\nimport {AddItemForm} from '../../AddItemForm/AddItemForm';\r\nimport {EditableSpan} from '../../../EditableSpan';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType, useAppSelector} from '../../../state/store';\r\nimport {changeTodoFilterAC, changeTodoTitleTC, removeTodoTC, TodoDomainType} from '../../../state/todolists-reducer';\r\nimport {createTaskTC, getTasksTC} from '../../../state/tasks-reducer';\r\nimport {Task} from './Task/Task';\r\nimport {Button, ButtonGroup, IconButton, List, Typography} from '@mui/material';\r\nimport {Delete} from '@mui/icons-material';\r\n\r\ntype PropsType = {\r\n    todolistId: string\r\n    title: string\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n\r\n    const todoList = useAppSelector(state => state.todolists.filter(tl => tl.id === props.todolistId)[0])\r\n    const tasks = useAppSelector(state => state.tasks[props.todolistId])\r\n    const dispatch = useDispatch()\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        dispatch(createTaskTC(todoList.id, title));\r\n    }, [dispatch, props.todolistId])\r\n\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        dispatch(changeTodoTitleTC(props.todolistId, title));\r\n    }, [dispatch, props.todolistId])\r\n\r\n    const removeTodolist = useCallback(() => {\r\n        dispatch(removeTodoTC(props.todolistId))\r\n    },[dispatch, props.todolistId])\r\n\r\n    const onAllClickHandler = useCallback(() => dispatch(changeTodoFilterAC(\"all\", props.todolistId)), [dispatch, props.todolistId]);\r\n    const onActiveClickHandler = useCallback(() => dispatch(changeTodoFilterAC(\"active\", props.todolistId)), [dispatch, props.todolistId]);\r\n    const onCompletedClickHandler = useCallback(() => dispatch(changeTodoFilterAC(\"completed\", props.todolistId)), [dispatch, props.todolistId]);\r\n\r\n    let tasksForRender = tasks;\r\n    if (todoList.filter === \"active\") tasksForRender = tasks.filter(t => t.status === TaskStatuses.New);\r\n    if (todoList.filter === \"completed\") tasksForRender = tasks.filter(t => t.status === TaskStatuses.Completed);\r\n\r\n    return <div className={'todoList'}>\r\n        <Typography align={'center'}>\r\n            <EditableSpan disabled={todoList.entityStatus === 'loading'}\r\n                setNewTitle={changeTodolistTitle} title={props.title}/>\r\n            <IconButton disabled={todoList.entityStatus === 'loading'} onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </Typography>\r\n        <AddItemForm disabled={todoList.entityStatus === 'loading'} addItem={addTask}/>\r\n        <List>\r\n            {\r\n                tasksForRender && tasksForRender.map(t => {\r\n                    return <Task key={t.id} task={t} todolistId={props.todolistId}/>\r\n                })\r\n            }\r\n        </List>\r\n        <div>\r\n            <ButtonGroup variant={'outlined'} aria-label={'medium button group'} disableElevation>\r\n                <Button variant={todoList.filter === 'all' ? 'contained' : 'outlined'}\r\n                    disabled={todoList.entityStatus === 'loading'} onClick={onAllClickHandler}>All</Button>\r\n                <Button variant={todoList.filter === 'active' ? 'contained' : 'outlined'}\r\n                    disabled={todoList.entityStatus === 'loading'} onClick={onActiveClickHandler}>Active</Button>\r\n                <Button variant={todoList.filter === 'completed' ? 'contained' : 'outlined'}\r\n                    disabled={todoList.entityStatus === 'loading'} onClick={onCompletedClickHandler}>Completed</Button>\r\n            </ButtonGroup>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import {Grid, Paper} from '@mui/material';\r\nimport {Todolist} from './Todolist/Todolist';\r\nimport React, {useCallback, useEffect} from 'react';\r\nimport {createTodoTC, getTodoTC} from '../../state/todolists-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType, useAppSelector} from '../../state/store';\r\nimport {TodoType} from '../../api/todolist-api';\r\nimport {AddItemForm} from '../AddItemForm/AddItemForm';\r\nimport {Navigate} from 'react-router-dom';\r\nimport {setAppStatusAC} from '../../state/app-reducer';\r\n\r\nexport const AllTodo = () => {\r\n\r\n    const todoLists = useSelector<AppRootStateType, TodoType[]>(state => state.todolists)\r\n    const {isLoggedIn} = useAppSelector(state => state.auth)\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if(!isLoggedIn) {\r\n            return\r\n        }\r\n        dispatch(getTodoTC())\r\n    }, [])\r\n\r\n    const addTodoList = useCallback((title: string) => {\r\n        dispatch(createTodoTC(title))\r\n    }, [dispatch])\r\n\r\n    const todoListsComponents = todoLists.map(tl => {\r\n        return (\r\n            <Grid item key={tl.id}>\r\n                <Paper elevation={14} style={{padding: '10px'}}>\r\n                    <Todolist\r\n                        todolistId={tl.id}\r\n                        title={tl.title}\r\n                    />\r\n                </Paper>\r\n            </Grid>\r\n        )\r\n    })\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to={'login'}/>\r\n    }\r\n\r\n    return (\r\n        <Grid container style={{padding: '30px 0'}}>\r\n            <Grid container style={{padding: '20px'}}>\r\n                <AddItemForm addItem={addTodoList}/>\r\n            </Grid>\r\n            <Grid container spacing={5}>\r\n                {todoListsComponents}\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from 'formik';\r\nimport {LoginParamsType} from '../../state/auth-api';\r\nimport {loginTC} from '../../state/auth-reducer';\r\nimport {useDispatch} from 'react-redux';\r\nimport {useAppSelector} from '../../state/store';\r\nimport {Navigate} from 'react-router-dom';\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const {isLoggedIn} = useAppSelector(state => state.auth)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: Partial<Omit<LoginParamsType, 'captcha'>> = {};\r\n            // const errors: Partial<Pick<LoginParamsType, 'email' | 'password' | 'rememberMe'>> = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Password is required'\r\n            } else if (values.password.length <= 3) {\r\n                errors.password = 'Password is too short'\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Navigate to={'/'}/>\r\n    }\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                                target={'_blank'}> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.touched.email &&\r\n                        formik.errors.email &&\r\n                        <div style={{color: ' red'}}>{formik.errors.email}</div>}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.touched.password &&\r\n                        formik.errors.password &&\r\n                        <div style={{color: ' red'}}>{formik.errors.password}</div>}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps('rememberMe')}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}","import s from './ErrorPage.module.css'\r\n\r\nexport const ErrorPage = () => {\r\n    return <div className={s.header}>\r\n        <h1>404: PAGE NOT FOUND</h1>\r\n    </div>\r\n}","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport {useDispatch} from 'react-redux';\r\nimport {useAppSelector} from './state/store';\r\nimport {Menu} from '@mui/icons-material';\r\nimport {AppBar, Button, CircularProgress, Container, IconButton, LinearProgress, Toolbar, Typography} from '@mui/material';\r\nimport {ErrorSnackbar} from './Components/ErrorSnackbar/ErrorSnackbar';\r\nimport {AllTodo} from './Components/AllTodo/AllTodo';\r\nimport {Navigate, Route, Routes} from 'react-router-dom';\r\nimport {Login} from './Components/Login/Login';\r\nimport {ErrorPage} from './Components/Error/Error';\r\nimport {initAppTC} from './state/app-reducer';\r\nimport {logoutTC} from './state/auth-reducer';\r\n\r\nfunction App() {\r\n\r\n    const {status, isInit} = useAppSelector(state => state.app)\r\n    const dispatch = useDispatch()\r\n    const {isLoggedIn, login} = useAppSelector(state => state.auth)\r\n\r\n    useEffect(() => {\r\n        dispatch(initAppTC())\r\n    }, [])\r\n\r\n    const logoutHandler = () => dispatch(logoutTC())\r\n\r\n    if (!isInit) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className={'App'}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar style={{justifyContent: \"space-between\"}}>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography\r\n                        variant=\"h6\">\r\n                        Todolists\r\n                    </Typography>\r\n                    {isLoggedIn && <div>\r\n                        <span style={{padding: '20px'}}>{login}</span><Button onClick={logoutHandler} color=\"inherit\" variant={\"outlined\"}>Logout</Button>\r\n                    </div>}\r\n                </Toolbar>\r\n            </AppBar>\r\n            {status === 'loading' && <LinearProgress/>}\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path={'/'} element={<AllTodo/>}/>\r\n                    <Route path={'/login'} element={<Login/>}/>\r\n                    <Route path={'/error-page'} element={<ErrorPage/>}/>\r\n                    <Route path={'*'} element={<Navigate to={'/error-page'}/>}/>\r\n                </Routes>\r\n            </Container>\r\n            <ErrorSnackbar/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './App';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './state/store';\r\nimport {HashRouter} from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <HashRouter>\r\n            <App/>\r\n        </HashRouter>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}