{"version":3,"sources":["Components/Error/ErrorPage.module.css","serviceWorker.ts","api/tasks-api.ts","api/todolist-api.ts","api/auth-api.ts","utils/error-utils.ts","state/app-reducer.ts","state/auth-reducer.ts","state/todolists-reducer.ts","state/tasks-reducer.ts","state/store.ts","Components/ErrorSnackbar/ErrorSnackbar.tsx","Components/AddItemForm/AddItemForm.tsx","EditableSpan.tsx","Components/AllTodo/Todolist/Task/Task.tsx","Components/AllTodo/Todolist/Todolist.tsx","Components/AllTodo/AllTodo.tsx","Components/Login/Login.tsx","Components/Error/Error.tsx","App.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","axiosInstance","axios","create","baseURL","withCredentials","headers","tasksAPI","tlId","get","then","res","data","title","post","taskId","delete","task","put","todolistApi","id","authAPI","handleServerAppError","dispatch","messages","length","setAppError","error","setAppStatus","status","handleServerNetworkError","message","initApp","createAsyncThunk","_","a","rejectWithValue","resultCode","login","setIsInit","isInit","slice","createSlice","name","initialState","reducers","state","action","payload","appReducer","reducer","actions","errors","fieldsErrors","logout","authReducer","isLoggedIn","extraReducers","builder","addCase","fulfilled","fetchTodos","forEach","tl","fetchTasks","removeTodo","todoId","changeTlEntity","entityStatus","createTodo","item","changeTodoTitle","changeTodoFilter","index","findIndex","filter","map","unshift","todolistsReducer","tasks","items","deleteTask","createTask","updateTask","model","getState","find","t","newTask","undefined","tasksReducer","splice","todoListId","rootReducer","combineReducers","todolists","app","auth","store","configureStore","middleware","getDefaultMiddleware","prepend","thunk","useAppSelector","useSelector","Alert","React","forwardRef","props","ref","elevation","variant","ErrorSnackbar","useDispatch","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","AddItemForm","memo","useState","setTitle","setError","addItem","trimmedTitle","trim","TextField","disabled","helperText","label","value","onChange","e","currentTarget","onKeyPress","key","IconButton","size","onClick","AddOutlined","fontSize","EditableSpan","editMode","setEditMode","onEditMode","offEditMode","setNewTitle","style","onBlur","autoFocus","onDoubleClick","display","margin","Edit","Task","todolistId","removeTaskCallback","useCallback","changeTaskStatus","checked","Completed","New","changeTitle","ListItem","padding","justifyContent","alignItems","className","Checkbox","color","Delete","Todolist","demo","todoList","addTask","changeTodolistTitle","removeTodolist","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","tasksForRender","Typography","align","List","ButtonGroup","aria-label","disableElevation","Button","AllTodo","todoLists","useEffect","addTodoList","todoListsComponents","Grid","Paper","container","spacing","to","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","onSubmit","formikHelpers","rejected","setFieldError","field","handleSubmit","FormControl","FormLabel","href","target","FormGroup","getFieldProps","touched","type","FormControlLabel","control","ErrorPage","s","header","App","AppBar","position","Toolbar","edge","Menu","LinearProgress","Container","fixed","path","element","top","textAlign","CircularProgress","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.a6781979.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"ErrorPage_header__1_mKy\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios, {AxiosResponse} from 'axios';\r\nimport {ResponseType} from './todolist-api';\r\n\r\nconst axiosInstance = axios.create({\r\n    baseURL: `https://social-network.samuraijs.com/api/1.1/todo-lists/`,\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'ecad3ae6-8083-4154-b722-6cea4b99f288'\r\n    }\r\n})\r\n\r\nexport const tasksAPI = {\r\n    getTasks(tlId: string) {\r\n        return axiosInstance.get<Response<TaskType[]>>(`${tlId}/tasks`).then(res => res.data)\r\n    },\r\n    createTask(tlId: string, title: string) {\r\n        return axiosInstance.post<{title: string},AxiosResponse<ResponseType<{ item: TaskType }>>>(`${tlId}/tasks`, {title}).then(res => res.data)\r\n    },\r\n    deleteTask(tlId: string, taskId: string) {\r\n        return axiosInstance.delete<ResponseType>(`${tlId}/tasks/${taskId}`).then(res => res.data)\r\n    },\r\n    updateTask(tlId: string, taskId: string, task: TaskModelType) {\r\n        return axiosInstance.put<TaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`${tlId}/tasks/${taskId}`, task).then(res => res.data)\r\n    }\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3,\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    High = 2,\r\n    Urgently = 3,\r\n    Later = 4,\r\n}\r\n\r\nexport type TaskType = {\r\n    title: string,\r\n    description: string,\r\n    status: TaskStatuses,\r\n    priority: number,\r\n    startDate: string,\r\n    deadline: string,\r\n    id: string,\r\n    todoListId: string,\r\n    order: number,\r\n    addedDate: string,\r\n}\r\n\r\nexport type TaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\ntype Response<D = {}> = {\r\n    items: D,\r\n    error: string[],\r\n    totalCount: number\r\n}","import axios, {AxiosResponse} from 'axios';\r\nimport {TodoDomainType} from '../state/todolists-reducer';\r\n\r\nconst axiosInstance = axios.create({\r\n    baseURL: `https://social-network.samuraijs.com/api/1.1/`,\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'ecad3ae6-8083-4154-b722-6cea4b99f288'\r\n    }\r\n})\r\n\r\nexport const todolistApi = {\r\n    getTLs() {\r\n        return axiosInstance.get<TodoDomainType[]>(`todo-lists`)\r\n    },\r\n    createTL(title: string) {\r\n        return axiosInstance.post<{title: string}, AxiosResponse<ResponseType<{ item: TodoDomainType }>>>(`todo-lists`, {title}).then(res => res.data)\r\n    },\r\n    deleteTL(id: string) {\r\n        return axiosInstance.delete<ResponseType>(`/todo-lists/${id}`).then(res => res.data)\r\n    },\r\n    updateTLTitle(id: string, title: string) {\r\n        return axiosInstance.put<{title: string},AxiosResponse<ResponseType>>(`/todo-lists/${id}`, {title}).then(res => res.data)\r\n    },\r\n}\r\n\r\nexport type TodoType = {\r\n    id: string,\r\n    title: string,\r\n    addedDate: string,\r\n    order: number,\r\n}\r\n\r\nexport type FieldErrorsType = {field: string, error: string}\r\n\r\nexport type ResponseType<T = {}> = {\r\n    fieldsErrors?: FieldErrorsType[],\r\n    messages: string[],\r\n    resultCode: number,\r\n    data: T\r\n}","import axios, {AxiosResponse} from 'axios';\r\nimport {ResponseType} from './todolist-api';\r\n\r\nconst axiosInstance = axios.create({\r\n    baseURL: `https://social-network.samuraijs.com/api/1.1/`,\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'ecad3ae6-8083-4154-b722-6cea4b99f288'\r\n    }\r\n})\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return axiosInstance.post<LoginParamsType, AxiosResponse<ResponseType<{userId: number}>>>(`auth/login`, data).then(res => res.data)\r\n    },\r\n    me() {\r\n        return axiosInstance.get<ResponseType<LoggedUserDataType>>(`auth/me`)\r\n    },\r\n    logout() {\r\n        return axiosInstance.delete<ResponseType>(`auth/login`)\r\n    },\r\n}\r\n\r\nexport type LoggedUserDataType = {\r\n    id: number,\r\n    login: string,\r\n    email: string,\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe?: boolean,\r\n    captcha?: string,\r\n}","import {ResponseType} from '../api/todolist-api';\r\nimport {Dispatch} from 'redux';\r\nimport {setAppError, setAppStatus} from '../state/app-reducer';\r\n\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: Dispatch) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppError({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppError({error: 'Some error occured'}))\r\n    }\r\n    dispatch(setAppStatus({status: 'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: {message: string}, dispatch: Dispatch) => {\r\n    dispatch(setAppError({error: error.message}))\r\n    dispatch(setAppStatus({status: 'failed'}))\r\n}","import {authAPI} from '../api/auth-api';\r\nimport {handleServerAppError, handleServerNetworkError} from '../utils/error-utils';\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit';\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nexport const initApp = createAsyncThunk('app/initApp', async (_, {dispatch, rejectWithValue}) => {\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        let res = await authAPI.me()\r\n        if (res.data.resultCode === 0) return {login: res.data.data.login}\r\n        else {\r\n            handleServerAppError(res.data, dispatch)\r\n            return rejectWithValue({})\r\n        }\r\n    } catch (e: any) {\r\n        handleServerNetworkError(e, dispatch)\r\n        return rejectWithValue({})\r\n    } finally {\r\n        dispatch(setIsInit({isInit: true}))\r\n    }\r\n})\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as string | null,\r\n    isInit: false\r\n}\r\n\r\nexport type AppInitStateType = typeof initialState\r\n\r\nconst slice = createSlice({\r\n    name: 'app',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAppStatus(state, action: PayloadAction<{ status: RequestStatusType }>) {\r\n            state.status = action.payload.status\r\n        },\r\n        setAppError(state, action: PayloadAction<{ error: string | null }>) {\r\n            state.error = action.payload.error\r\n        },\r\n        setIsInit(state, action: PayloadAction<{ isInit: boolean }>) {\r\n            state.isInit = action.payload.isInit\r\n        }\r\n    }\r\n})\r\n\r\nexport const appReducer = slice.reducer\r\nexport const {setAppStatus, setAppError, setIsInit} = slice.actions\r\n\r\n","import {authAPI, LoginParamsType} from '../api/auth-api';\r\nimport {initApp, setAppStatus} from './app-reducer';\r\nimport {handleServerAppError, handleServerNetworkError} from '../utils/error-utils';\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit';\r\nimport {AxiosError} from 'axios';\r\nimport {FieldErrorsType} from '../api/todolist-api';\r\n\r\nexport const login = createAsyncThunk<undefined, LoginParamsType,\r\n    {rejectValue: {errors: string[], fieldsErrors?: FieldErrorsType[]}}>('auth/login',\r\n    async (data, {dispatch, rejectWithValue}) => {\r\n    dispatch(setAppStatus({ status: 'loading' }))\r\n    try {\r\n        let res = await authAPI.login(data)\r\n        if (res.resultCode === 0) {\r\n            dispatch(setAppStatus({ status:'succeeded' }))\r\n            return;\r\n        } else {\r\n            handleServerAppError(res, dispatch)\r\n            return rejectWithValue({errors: res.messages, fieldsErrors: res.fieldsErrors})\r\n        }\r\n    } catch (err: any) {\r\n        const error: AxiosError = err\r\n        handleServerNetworkError(err, dispatch)\r\n        return rejectWithValue({errors: [error.message]})\r\n    }\r\n})\r\n\r\nexport const logout = createAsyncThunk('auth/logout', async (_, {dispatch, rejectWithValue}) => {\r\n    dispatch(setAppStatus({ status: 'loading' }))\r\n    try {\r\n        let res = await authAPI.logout()\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setAppStatus({ status: 'succeeded' }))\r\n            return;\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n            return rejectWithValue({})\r\n        }\r\n    } catch (e: any) {\r\n        handleServerNetworkError(e, dispatch)\r\n        return rejectWithValue({})\r\n    }\r\n})\r\n\r\nconst slice = createSlice({\r\n    name: 'auth',\r\n    initialState: {\r\n        isLoggedIn: false,\r\n        login: null as string | null,\r\n    },\r\n    reducers: {},\r\n    extraReducers: builder => {\r\n        builder.addCase(login.fulfilled, (state) => {\r\n            state.isLoggedIn = true\r\n        })\r\n        builder.addCase(logout.fulfilled, (state) => {\r\n            state.isLoggedIn = false;\r\n            state.login = null;\r\n        })\r\n        builder.addCase(initApp.fulfilled, (state, action) => {\r\n            if (action.payload) state.login = action.payload.login\r\n            state.isLoggedIn = true\r\n        })\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer","import {todolistApi, TodoType} from '../api/todolist-api';\r\nimport {RequestStatusType, setAppStatus} from './app-reducer';\r\nimport {handleServerAppError, handleServerNetworkError} from '../utils/error-utils';\r\nimport {fetchTasks} from './tasks-reducer';\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit';\r\nimport {logout} from './auth-reducer';\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodoDomainType = TodoType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nexport const fetchTodos = createAsyncThunk('todo/getTodo', async (_, {dispatch, rejectWithValue}) => {\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        let res = await todolistApi.getTLs()\r\n        if (res.data) {\r\n            await res.data.forEach(tl => dispatch(fetchTasks(tl.id)))\r\n            return res.data\r\n        } else {\r\n            return rejectWithValue({})\r\n        }\r\n    } catch (err: any) {\r\n        handleServerNetworkError(err, dispatch)\r\n        return rejectWithValue({})\r\n    }\r\n})\r\n\r\nexport const removeTodo = createAsyncThunk('todo/removeTodo', async (todoId: string, {dispatch, rejectWithValue}) => {\r\n    dispatch(changeTlEntity({todoId, entityStatus: 'loading'}))\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        let res = await todolistApi.deleteTL(todoId)\r\n        if (res.resultCode === 0) {\r\n            dispatch(setAppStatus({status: 'idle'}))\r\n            return todoId\r\n        } else handleServerAppError(res, dispatch)\r\n        return rejectWithValue({})\r\n    } catch (err: any) {\r\n        handleServerNetworkError(err, dispatch)\r\n        return rejectWithValue({})\r\n    }\r\n})\r\n\r\nexport const createTodo = createAsyncThunk('todo/createTodo', async (title: string, {dispatch, rejectWithValue}) => {\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        let res = await todolistApi.createTL(title)\r\n        if (res.resultCode === 0) {\r\n            dispatch(setAppStatus({status: 'idle'}))\r\n            return res.data.item\r\n        } else {\r\n            handleServerAppError(res, dispatch)\r\n            return rejectWithValue({})\r\n        }\r\n    } catch (err: any) {\r\n        handleServerNetworkError(err, dispatch)\r\n        return rejectWithValue({})\r\n    }\r\n})\r\n\r\nexport const changeTodoTitle = createAsyncThunk('todo/changeTodoTitle', async ({todoId, title}: { todoId: string, title: string }, {dispatch, rejectWithValue}) => {\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        let res = await todolistApi.updateTLTitle(todoId, title)\r\n        if (res.resultCode === 0) {\r\n            dispatch(setAppStatus({status: 'idle'}))\r\n            return {title, todoId}\r\n        } else {\r\n            handleServerAppError(res, dispatch)\r\n            return rejectWithValue({})\r\n        }\r\n    } catch (err: any) {\r\n        handleServerNetworkError(err, dispatch)\r\n        return rejectWithValue({})\r\n    }\r\n})\r\n\r\nconst slice = createSlice({\r\n    name: 'todo',\r\n    initialState: [] as TodoDomainType[],\r\n    reducers: {\r\n        changeTodoFilter(state, action: PayloadAction<{ todoId: string, filter: FilterValuesType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.todoId)\r\n            if (index > -1) state[index].filter = action.payload.filter\r\n        },\r\n        changeTlEntity(state, action: PayloadAction<{ todoId: string, entityStatus: RequestStatusType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.todoId)\r\n            if (index > -1) state[index].entityStatus = action.payload.entityStatus\r\n        },\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(logout.fulfilled, state => {\r\n            return []\r\n        })\r\n        builder.addCase(fetchTodos.fulfilled, (state, action) => {\r\n            return action.payload.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        })\r\n        builder.addCase(removeTodo.fulfilled, (state, action) => {\r\n            return state.filter(tl => tl.id !== action.payload)\r\n        })\r\n        builder.addCase(createTodo.fulfilled, ((state, action) => {\r\n            state.unshift({...action.payload, filter: 'all', entityStatus: 'idle'})\r\n        }))\r\n        builder.addCase(changeTodoTitle.fulfilled, ((state, action) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload!.todoId)\r\n            if (index > -1) state[index].title = action.payload.title\r\n        }))\r\n    }\r\n})\r\n\r\nexport const todolistsReducer = slice.reducer\r\nexport const {changeTodoFilter, changeTlEntity,} = slice.actions","import {TaskModelType, tasksAPI, TaskType} from '../api/tasks-api';\r\nimport {createTodo, fetchTodos, removeTodo} from './todolists-reducer';\r\nimport {RootStateType} from './store';\r\nimport {setAppStatus} from './app-reducer';\r\nimport {handleServerAppError, handleServerNetworkError} from '../utils/error-utils';\r\nimport {createAsyncThunk, createSlice} from '@reduxjs/toolkit';\r\nimport {logout} from './auth-reducer';\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\ntype UpdatePayloadType = {\r\n    todoId: string,\r\n    taskId: string,\r\n    model: TaskModelType,\r\n}\r\n\r\nexport const fetchTasks = createAsyncThunk('tasks/fetchTasks',\r\n    async (tlId: string, {dispatch, rejectWithValue}) => {\r\n        dispatch(setAppStatus({status: 'loading'}))\r\n        try {\r\n            let res = await tasksAPI.getTasks(tlId)\r\n            dispatch(setAppStatus({status: 'succeeded'}))\r\n            return {todoId: tlId, tasks: res.items}\r\n        } catch (e: any) {\r\n            handleServerNetworkError(e.message, dispatch)\r\n            return rejectWithValue({})\r\n        }\r\n    })\r\n\r\nexport const deleteTask = createAsyncThunk('tasks/deleteTask',\r\n    async ({tlId, taskId}: { tlId: string, taskId: string }, {dispatch, rejectWithValue}) => {\r\n        dispatch(setAppStatus({status: 'loading'}))\r\n        try {\r\n            let res = await tasksAPI.deleteTask(tlId, taskId)\r\n            if (res.resultCode === 0) {\r\n                dispatch(setAppStatus({status: 'succeeded'}))\r\n                return {tlId, taskId}\r\n            } else {\r\n                handleServerAppError(res, dispatch)\r\n                return rejectWithValue({})\r\n            }\r\n        } catch (e: any) {\r\n            handleServerNetworkError(e.message, dispatch)\r\n            return rejectWithValue({})\r\n        }\r\n    })\r\n\r\nexport const createTask = createAsyncThunk('tasks/createTask',\r\n    async ({tlId, title}: { tlId: string, title: string }, {dispatch, rejectWithValue}) => {\r\n        dispatch(setAppStatus({status: 'loading'}))\r\n        try {\r\n            let res = await tasksAPI.createTask(tlId, title)\r\n            if (res.resultCode === 0) {\r\n                dispatch(setAppStatus({status: 'idle'}))\r\n                return res.data.item\r\n            } else {\r\n                handleServerAppError(res, dispatch)\r\n                return rejectWithValue({})\r\n            }\r\n        } catch (e: any) {\r\n            handleServerNetworkError(e, dispatch)\r\n            return rejectWithValue({})\r\n        }\r\n    })\r\n\r\nexport const updateTask = createAsyncThunk<UpdatePayloadType | undefined, UpdatePayloadType, { state: RootStateType }>\r\n('tasks/updateTask',\r\n    async ({todoId, taskId, model}: UpdatePayloadType,\r\n           {dispatch, getState, rejectWithValue}) => {\r\n        dispatch(setAppStatus({status: 'loading'}))\r\n        try {\r\n            const task = getState().tasks[todoId].find(t => t.id === taskId)\r\n            if (task) {\r\n                let newTask: TaskModelType = {...task, ...model}\r\n                let res = await tasksAPI.updateTask(todoId, taskId, newTask)\r\n                if (res.resultCode === 0) {\r\n                    dispatch(setAppStatus({status: 'idle'}))\r\n                    return {taskId, model: newTask, todoId}\r\n                } else {\r\n                    handleServerAppError(res, dispatch)\r\n                    return rejectWithValue(undefined)\r\n                }\r\n            }\r\n        } catch (err: any) {\r\n            handleServerNetworkError(err, dispatch)\r\n            return rejectWithValue(undefined)\r\n        }\r\n    })\r\n\r\nconst slice = createSlice({\r\n    name: 'tasks',\r\n    initialState: {} as TasksStateType,\r\n    reducers: {},\r\n    extraReducers: builder => {\r\n        builder.addCase(createTodo.fulfilled, (state, action) => {\r\n            state[action.payload.id] = []\r\n        });\r\n        builder.addCase(fetchTodos.fulfilled, (state, action) => {\r\n            action.payload.forEach(tl => state[tl.id] = [])\r\n        });\r\n        builder.addCase(removeTodo.fulfilled, (state, action) => {\r\n            delete state[action.payload]\r\n        });\r\n        builder.addCase(logout.fulfilled, (state, action) => {\r\n            return {}\r\n        });\r\n        builder.addCase(fetchTasks.fulfilled, (state, action) => {\r\n            state[action.payload.todoId] = action.payload.tasks\r\n        });\r\n        builder.addCase(deleteTask.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.tlId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) tasks.splice(index, 1)\r\n        });\r\n        builder.addCase(createTask.fulfilled, (state, action) => {\r\n            state[action.payload.todoListId].unshift(action.payload)\r\n        })\r\n        builder.addCase(updateTask.fulfilled, (state, action) => {\r\n            if (action.payload) {\r\n                let tasks = state[action.payload.todoId]\r\n                let index = tasks.findIndex(t => t.id === action.payload!.taskId)\r\n                if (index > -1) tasks[index] = {...tasks[index], ...action.payload.model}\r\n            }\r\n        })\r\n    }\r\n})\r\n\r\nexport const tasksReducer = slice.reducer","import {tasksReducer} from './tasks-reducer';\r\nimport {todolistsReducer} from './todolists-reducer';\r\nimport {AnyAction, combineReducers} from 'redux';\r\nimport thunk, {ThunkAction} from 'redux-thunk';\r\nimport {TypedUseSelectorHook, useDispatch, useSelector} from 'react-redux';\r\nimport {appReducer} from './app-reducer';\r\nimport {authReducer} from './auth-reducer';\r\nimport {configureStore} from '@reduxjs/toolkit';\r\n\r\nconst rootReducer = combineReducers({\r\n    todolists: todolistsReducer,\r\n    tasks: tasksReducer,\r\n    app: appReducer,\r\n    auth: authReducer,\r\n})\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunk)\r\n})\r\n\r\nexport const useAppSelector: TypedUseSelectorHook<RootStateType> = useSelector\r\nexport type ThunkType = ThunkAction<void, RootStateType, unknown, AnyAction>\r\ntype AppDispatchType = typeof store.dispatch\r\nexport const useAppDispatch = () => useDispatch<AppDispatchType>()\r\n\r\nexport type RootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport {useAppSelector} from '../../state/store';\r\nimport {useDispatch} from 'react-redux';\r\nimport {setAppError} from '../../state/app-reducer';\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport function ErrorSnackbar() {\r\n    const {error} = useAppSelector(state => state.app)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppError({ error: null }))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={5000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@mui/material';\r\nimport {AddOutlined} from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\r\n    let [title, setTitle] = useState<string>(\"\")\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        setError(false)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    const addItem = () => {\r\n        const trimmedTitle = title.trim();\r\n        setTitle(\"\");\r\n        if (trimmedTitle) {\r\n            props.addItem(trimmedTitle);\r\n        } else {\r\n            setError(true);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                disabled={props.disabled}\r\n                error={error}\r\n                helperText={error && 'Title is required'}\r\n                label={'Enter title'}\r\n                value={title}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n            />\r\n            <IconButton disabled={props.disabled} size={'small'} onClick={addItem}>\r\n                <AddOutlined fontSize={'large'}/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@mui/material';\r\nimport {Edit} from '@mui/icons-material';\r\n\r\ntype EditableSpanProps = {\r\n    title: string\r\n    setNewTitle: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanProps) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(props.title)\r\n\r\n    const onEditMode = () => setEditMode(true)\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.setNewTitle(title)\r\n    }\r\n\r\n    const onKeyPressOffEditMode = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter')\r\n            offEditMode()\r\n    }\r\n\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        editMode ? <TextField\r\n                disabled={props.disabled}\r\n                style={{width: '148px'}}\r\n                value={title}\r\n                onBlur={offEditMode}\r\n                autoFocus onChange={changeTitle}\r\n                onKeyPress={onKeyPressOffEditMode}/>\r\n            : <span onDoubleClick={onEditMode} style={{display: 'inline-block', margin: '0 auto 0 0'}}>{props.title}\r\n                <IconButton style={{display: 'inline-block'}}\r\n                    disabled={props.disabled} size={'small'} onClick={onEditMode}>\r\n                <Edit fontSize={'small'}/>\r\n            </IconButton>\r\n        </span>\r\n    )\r\n})","import {useDispatch} from 'react-redux';\r\nimport {deleteTask, updateTask} from '../../../../state/tasks-reducer';\r\nimport React, {ChangeEvent, useCallback} from 'react';\r\nimport {EditableSpan} from '../../../../EditableSpan';\r\nimport {TaskStatuses, TaskType} from '../../../../api/tasks-api';\r\nimport {Checkbox, IconButton, ListItem} from '@mui/material';\r\nimport {Delete} from '@mui/icons-material';\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType,\r\n    todolistId: string,\r\n}\r\n\r\nexport const Task = React.memo(({task, todolistId}: TaskPropsType) => {\r\n\r\n    const dispatch = useDispatch()\r\n    const removeTaskCallback = useCallback(() => dispatch(deleteTask({tlId: todolistId, taskId: task.id})),\r\n        [dispatch, task.id, todolistId])\r\n    const changeTaskStatus = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let status = e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New\r\n        dispatch(updateTask({todoId: todolistId, taskId: task.id, model: {status}}))\r\n    }, [dispatch, task.id, todolistId])\r\n\r\n    const changeTitle = useCallback((title: string) => {\r\n        dispatch(updateTask({todoId: todolistId, taskId: task.id, model: {title}}))\r\n    }, [dispatch, task.id, todolistId])\r\n    return <ListItem\r\n        style={{padding: '0', display: 'flex', justifyContent: 'space-between'}}\r\n        alignItems={'center'}\r\n        className={task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            onChange={changeTaskStatus}\r\n            checked={task.status === TaskStatuses.Completed}\r\n            color={'primary'}\r\n            size={'small'}/>\r\n        <EditableSpan setNewTitle={changeTitle} title={task.title}/>\r\n        <IconButton size={'small'} onClick={removeTaskCallback}>\r\n            <Delete fontSize={'small'}/>\r\n        </IconButton>\r\n    </ListItem>\r\n})","import React, {useCallback} from 'react';\r\nimport {TaskStatuses} from '../../../api/tasks-api';\r\nimport {AddItemForm} from '../../AddItemForm/AddItemForm';\r\nimport {EditableSpan} from '../../../EditableSpan';\r\nimport {useDispatch} from 'react-redux';\r\nimport {useAppSelector} from '../../../state/store';\r\nimport {changeTodoFilter, changeTodoTitle, removeTodo} from '../../../state/todolists-reducer';\r\nimport {createTask} from '../../../state/tasks-reducer';\r\nimport {Task} from './Task/Task';\r\nimport {Button, ButtonGroup, IconButton, List, Typography} from '@mui/material';\r\nimport {Delete} from '@mui/icons-material';\r\n\r\ntype PropsType = {\r\n    todolistId: string\r\n    title: string\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({todolistId,title,demo}: PropsType) {\r\n\r\n    const todoList = useAppSelector(state => state.todolists.filter(tl => tl.id === todolistId)[0])\r\n    const tasks = useAppSelector(state => state.tasks[todolistId])\r\n    const dispatch = useDispatch()\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        if (demo) return\r\n        dispatch(createTask({tlId: todoList.id, title}));\r\n    }, [dispatch, todoList.id])\r\n\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        dispatch(changeTodoTitle({todoId: todoList.id, title}));\r\n    }, [dispatch, todoList.id])\r\n\r\n    const removeTodolist = useCallback(() => {\r\n        dispatch(removeTodo(todoList.id))\r\n    },[dispatch, todoList.id])\r\n\r\n    const onAllClickHandler = useCallback(() => dispatch(changeTodoFilter(\r\n        {todoId: todolistId, filter: \"all\"})), [dispatch, todolistId]);\r\n    const onActiveClickHandler = useCallback(() => dispatch(changeTodoFilter(\r\n        {todoId: todolistId, filter: \"active\"})), [dispatch, todolistId]);\r\n    const onCompletedClickHandler = useCallback(() => dispatch(changeTodoFilter(\r\n        {todoId: todolistId, filter: \"completed\"})), [dispatch, todolistId]);\r\n\r\n    let tasksForRender = tasks;\r\n    if (todoList.filter === \"active\") tasksForRender = tasks.filter(t => t.status === TaskStatuses.New);\r\n    if (todoList.filter === \"completed\") tasksForRender = tasks.filter(t => t.status === TaskStatuses.Completed);\r\n\r\n    return <div className={'todoList'}>\r\n        <Typography align={'center'}>\r\n            <EditableSpan disabled={todoList.entityStatus === 'loading'}\r\n                setNewTitle={changeTodolistTitle} title={title}/>\r\n            <IconButton disabled={todoList.entityStatus === 'loading'} onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </Typography>\r\n        <AddItemForm disabled={todoList.entityStatus === 'loading'} addItem={addTask}/>\r\n        <List>\r\n            {\r\n                tasksForRender && tasksForRender.map(t => {\r\n                    return <Task key={t.id} task={t} todolistId={todolistId}/>\r\n                })\r\n            }\r\n        </List>\r\n        <div>\r\n            <ButtonGroup variant={'outlined'} aria-label={'medium button group'} disableElevation>\r\n                <Button variant={todoList.filter === 'all' ? 'contained' : 'outlined'}\r\n                    disabled={todoList.entityStatus === 'loading'} onClick={onAllClickHandler}>All</Button>\r\n                <Button variant={todoList.filter === 'active' ? 'contained' : 'outlined'}\r\n                    disabled={todoList.entityStatus === 'loading'} onClick={onActiveClickHandler}>Active</Button>\r\n                <Button variant={todoList.filter === 'completed' ? 'contained' : 'outlined'}\r\n                    disabled={todoList.entityStatus === 'loading'} onClick={onCompletedClickHandler}>Completed</Button>\r\n            </ButtonGroup>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import {Grid, Paper} from '@mui/material';\r\nimport {Todolist} from './Todolist/Todolist';\r\nimport React, {useCallback, useEffect} from 'react';\r\nimport {createTodo, fetchTodos} from '../../state/todolists-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {RootStateType, useAppSelector} from '../../state/store';\r\nimport {TodoType} from '../../api/todolist-api';\r\nimport {AddItemForm} from '../AddItemForm/AddItemForm';\r\nimport {Navigate} from 'react-router-dom';\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const AllTodo = ({demo}: PropsType) => {\r\n\r\n    const todoLists = useSelector<RootStateType, TodoType[]>(state => state.todolists)\r\n    const {isLoggedIn} = useAppSelector(state => state.auth)\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if(demo || !isLoggedIn) return\r\n        dispatch(fetchTodos())\r\n    }, [])\r\n\r\n    const addTodoList = useCallback((title: string) => {\r\n        dispatch(createTodo(title))\r\n    }, [dispatch])\r\n\r\n    const todoListsComponents = todoLists.map(tl => {\r\n        return (\r\n            <Grid item key={tl.id}>\r\n                <Paper elevation={14} style={{padding: '10px'}}>\r\n                    <Todolist\r\n                        todolistId={tl.id}\r\n                        title={tl.title}\r\n                        demo={demo}\r\n                    />\r\n                </Paper>\r\n            </Grid>\r\n        )\r\n    })\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to={'login'}/>\r\n    }\r\n\r\n    return (\r\n        <Grid container style={{padding: '30px 0'}}>\r\n            <Grid container style={{padding: '20px'}}>\r\n                <AddItemForm addItem={addTodoList}/>\r\n            </Grid>\r\n            <Grid container spacing={5}>\r\n                {todoListsComponents}\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {FormikHelpers, useFormik} from 'formik';\r\nimport {LoginParamsType} from '../../api/auth-api';\r\nimport {login} from '../../state/auth-reducer';\r\nimport {useAppDispatch, useAppSelector} from '../../state/store';\r\nimport {Navigate} from 'react-router-dom';\r\n\r\ntype FormikValuesType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean,\r\n}\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useAppDispatch()\r\n    const {isLoggedIn} = useAppSelector(state => state.auth)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: Partial<Omit<LoginParamsType, 'captcha'>> = {};\r\n            // const errors: Partial<Pick<LoginParamsType, 'email' | 'password' | 'rememberMe'>> = {};\r\n            // if (!values.email) {\r\n            //     errors.email = 'Email is required';\r\n            // } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n            //     errors.email = 'Invalid email address';\r\n            // }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Password is required'\r\n            } else if (values.password.length <= 3) {\r\n                errors.password = 'Password is too short'\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: async (values: FormikValuesType, formikHelpers: FormikHelpers<FormikValuesType>) => {\r\n            let action = await dispatch(login(values))\r\n            if (login.rejected.match(action)) {\r\n                if (action.payload?.fieldsErrors?.length) {\r\n                    const error = action.payload.fieldsErrors[0]\r\n                    formikHelpers.setFieldError(error.field, error.error)\r\n                }\r\n            }\r\n        }\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Navigate to={'/'}/>\r\n    }\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                                target={'_blank'}> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.touched.email &&\r\n                        formik.errors.email &&\r\n                        <div style={{color: ' red'}}>{formik.errors.email}</div>}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.touched.password &&\r\n                        formik.errors.password &&\r\n                        <div style={{color: ' red'}}>{formik.errors.password}</div>}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps('rememberMe')}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}","import s from './ErrorPage.module.css'\r\n\r\nexport const ErrorPage = () => {\r\n    return <div className={s.header}>\r\n        <h1>404: PAGE NOT FOUND</h1>\r\n    </div>\r\n}","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport {useDispatch} from 'react-redux';\r\nimport {useAppSelector} from './state/store';\r\nimport {Menu} from '@mui/icons-material';\r\nimport {AppBar, Button, CircularProgress, Container, IconButton, LinearProgress, Toolbar, Typography} from '@mui/material';\r\nimport {ErrorSnackbar} from './Components/ErrorSnackbar/ErrorSnackbar';\r\nimport {AllTodo} from './Components/AllTodo/AllTodo';\r\nimport {Navigate, Route, Routes} from 'react-router-dom';\r\nimport {Login} from './Components/Login/Login';\r\nimport {ErrorPage} from './Components/Error/Error';\r\nimport {initApp} from './state/app-reducer';\r\nimport {logout} from './state/auth-reducer';\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo}: PropsType) {\r\n\r\n    const {status, isInit} = useAppSelector(state => state.app)\r\n    const dispatch = useDispatch()\r\n    const {isLoggedIn, login} = useAppSelector(state => state.auth)\r\n\r\n    useEffect(() => {\r\n        if(!demo) dispatch(initApp())\r\n    }, [isLoggedIn])\r\n\r\n    const logoutHandler = () => dispatch(logout())\r\n\r\n    if (!isInit) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className={'App'}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar style={{justifyContent: \"space-between\"}}>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography\r\n                        variant=\"h6\">\r\n                        Todolists\r\n                    </Typography>\r\n                    {isLoggedIn && <div>\r\n                        <span style={{padding: '20px'}}>{login}</span><Button onClick={logoutHandler} color=\"inherit\" variant={\"outlined\"}>Logout</Button>\r\n                    </div>}\r\n                </Toolbar>\r\n            </AppBar>\r\n            {status === 'loading' && <LinearProgress/>}\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path={'/'} element={<AllTodo demo={demo}/>}/>\r\n                    <Route path={'/login'} element={<Login/>}/>\r\n                    <Route path={'/error-page'} element={<ErrorPage/>}/>\r\n                    <Route path={'*'} element={<Navigate to={'/error-page'}/>}/>\r\n                </Routes>\r\n            </Container>\r\n            <ErrorSnackbar/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './App';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './state/store';\r\nimport {HashRouter} from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n    <HashRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </HashRouter>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}