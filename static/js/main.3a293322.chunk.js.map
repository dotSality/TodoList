{"version":3,"sources":["serviceWorker.ts","api/tasks-api.ts","Components/AddItemForm.tsx","api/todolist-api.ts","state/app-reducer.ts","utils/error-utils.ts","state/todolists-reducer.ts","state/tasks-reducer.ts","state/store.ts","EditableSpan.tsx","Components/Task.tsx","Components/TodoList1.tsx","Components/ErrorSnackbar.tsx","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","AddItemForm","React","memo","props","useState","title","setTitle","error","setError","addItem","trimmedTitle","trim","TextField","disabled","helperText","label","value","onChange","e","currentTarget","onKeyPress","key","IconButton","size","onClick","AddOutlined","fontSize","axiosInstance","axios","create","baseURL","withCredentials","headers","todolistApi","get","then","res","data","post","id","delete","put","initialState","status","setAppStatusAC","type","setAppErrorAC","handleServerAppError","dispatch","messages","length","handleServerNetworkError","message","changeTodoFilterAC","filter","tasksAPI","tlId","taskId","task","item","updateTaskAC","taskID","model","todolistID","rootReducer","combineReducers","tasks","state","action","t","copy","todoListId","map","todolists","forEach","tl","stateCopy","todo","entityStatus","app","store","createStore","applyMiddleware","thunk","useAppSelector","useSelector","EditableSpan","editMode","setEditMode","onEditMode","offEditMode","setNewTitle","style","width","onBlur","autoFocus","onDoubleClick","display","margin","Edit","Task","useDispatch","removeTaskCallback","useCallback","todolistId","changeTaskStatus","checked","Completed","New","getState","find","catch","err","changeTitle","changeTaskTitleTC","ListItem","padding","justifyContent","alignItems","className","Checkbox","color","Delete","Todolist1","todoList","useEffect","setTasksAC","items","addTask","resultCode","createTaskTC","changeTodolistTitle","changeTodoTitleAC","changeTodoTitleTC","removeTodolist","changeTlEntityAC","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","tasksForRender","Typography","align","List","ButtonGroup","variant","aria-label","disableElevation","Button","Alert","forwardRef","ref","elevation","ErrorSnackbar","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","App","todoLists","addTodoList","addTodoAC","createTodoTC","todoListsComponents","Grid","Paper","AppBar","position","Toolbar","edge","Menu","LinearProgress","Container","fixed","container","spacing","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"qMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCQMC,EAOAC,E,0CCxBCC,EAAcC,IAAMC,MAAK,SAACC,GAAiC,IAAD,EAC3CC,mBAAiB,IAD0B,mBAC9DC,EAD8D,KACvDC,EADuD,OAEzCF,oBAAkB,GAFuB,mBAE5DG,EAF4D,KAErDC,EAFqD,KAc7DC,EAAU,WACZ,IAAMC,EAAeL,EAAMM,OAC3BL,EAAS,IACLI,EACAP,EAAMM,QAAQC,GAEdF,GAAS,IAIjB,OACI,gCACI,cAACI,EAAA,EAAD,CACIC,SAAUV,EAAMU,SAChBN,MAAOA,EACPO,WAAYP,GAAS,oBACrBQ,MAAO,cACPC,MAAOX,EACPY,SA5BY,SAACC,GACrBZ,EAASY,EAAEC,cAAcH,OACzBR,GAAS,IA2BDY,WAzBc,SAACF,GACT,UAAVA,EAAEG,KACFZ,OAyBA,cAACa,EAAA,EAAD,CAAYT,SAAUV,EAAMU,SAAUU,KAAM,QAASC,QAASf,EAA9D,SACI,cAACgB,EAAA,EAAD,CAAaC,SAAU,kB,iCC1CjCC,EAAgBC,IAAMC,OAAO,CAC/BC,QAAQ,gDACRC,iBAAiB,EACjBC,QAAS,CACL,UAAW,0CAINC,EAAc,WAEnB,OAAON,EAAcO,IAAd,cAAkDC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SAFpEJ,EAAc,SAId5B,GACL,OAAOsB,EAAcW,KAAd,aAAyG,CAACjC,UAAQ8B,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SALpIJ,EAAc,SAOdM,GACL,OAAOZ,EAAca,OAAd,sBAAkDD,IAAMJ,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SAR1EJ,EAAc,SAUTM,EAAYlC,GACtB,OAAOsB,EAAcc,IAAd,sBAA+DF,GAAM,CAAClC,WCpB/EqC,EAAe,CACjBC,OAAQ,OACRpC,MAAO,MAgBEqC,EAAiB,SAACD,GAAD,MAAgC,CAACE,KAAM,iBAAkBF,WAC1EG,EAAgB,SAACvC,GAAD,MAA2B,CAACsC,KAAM,gBAAiBtC,UCjBnEwC,EAAuB,SAAIV,EAAuBW,GACvDX,EAAKY,SAASC,OACdF,EAASF,EAAcT,EAAKY,SAAS,KAErCD,EAASF,EAAc,uBAE3BE,EAASJ,EAAe,YAGfO,EAA2B,SAAC5C,EAA0ByC,GAC/DA,EAASF,EAAcvC,EAAM6C,UAC7BJ,EAASJ,EAAe,YCEfS,EAAqB,SAACC,EAA0Bf,GAA3B,MAA2C,CAACM,KAAM,qBAAsBS,SAAQf,OAa5GG,EAAiC,G,eL3BjCf,EAAgBC,IAAMC,OAAO,CAC/BC,QAAQ,2DACRC,iBAAiB,EACjBC,QAAS,CACL,UAAW,0CAINuB,EAAW,SACXC,GACL,OAAO7B,EAAcO,IAAd,UAA2CsB,EAA3C,WAAyDrB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SAF3EkB,EAAW,SAITC,EAAcnD,GACrB,OAAOsB,EAAcW,KAAd,UAAuFkB,EAAvF,UAAqG,CAACnD,UAAQ8B,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SALhIkB,EAAW,SAOTC,EAAcC,GACrB,OAAO9B,EAAca,OAAd,UAAkCgB,EAAlC,kBAAgDC,IAAUtB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SAR5EkB,EAAW,SAUTC,EAAcC,EAAgBC,GACrC,OAAO/B,EAAcc,IAAd,UAAqFe,EAArF,kBAAmGC,GAAUC,GAAMvB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,KAAKA,KAAKsB,U,SAIhJ7D,O,aAAAA,I,2BAAAA,I,yBAAAA,I,kBAAAA,M,cAOAC,O,aAAAA,I,mBAAAA,I,eAAAA,I,uBAAAA,I,kBAAAA,M,KMrBL,IAEM6D,EAAe,SAACC,EAAgBC,EAAsBC,GAAvC,MAA+D,CAAClB,KAAM,oBAAqBgB,SAAQC,QAAOC,eAgBhIrB,EAA+B,G,gBCvB/BsB,EAAcC,YAAgB,CAChCC,MDwBwB,WAAmE,IAAlEC,EAAiE,uDAAzDzB,EAAc0B,EAA2C,uCAC1F,OAAQA,EAAOvB,MACX,IAAK,oBACD,OAAO,2BAAIsB,GAAX,kBAAmBC,EAAOL,WAAaI,EAAMC,EAAOL,YAAYT,QAAO,SAAAe,GAAC,OAAIA,EAAE9B,KAAO6B,EAAOP,YAChG,IAAK,iBACD,IAAIS,EAAI,eAAOH,GACXD,EAAQI,EAAKF,EAAOV,KAAKa,YAE7B,OADAD,EAAKF,EAAOV,KAAKa,YAAjB,CAAgCH,EAAOV,MAAvC,mBAAgDQ,IACzCI,EAEX,IAAK,oBACD,OAAO,2BAAIH,GAAX,kBAAmBC,EAAOL,WAAaI,EAAMC,EAAOL,YAAYS,KAAI,SAAAH,GAAC,OAAID,EAAOP,SAAWQ,EAAE9B,GAApB,2BAA6B8B,GAAMD,EAAON,OAASO,OAChI,IAAK,qBACD,OAAO,2BAAIF,GAAX,kBAAmBC,EAAOL,WAAaI,EAAMC,EAAOL,YAAYS,KAAI,SAAAH,GAAC,OAAIA,EAAE9B,KAAO6B,EAAOP,OAAhB,2BAA6BQ,GAA7B,IAAgChE,MAAO+D,EAAO/D,QAASgE,OACpI,IAAK,gBACD,IAAIC,EAAI,eAAOH,GAEf,OADAC,EAAOK,UAAUC,SAAQ,SAAAC,GAAE,OAAIL,EAAKK,EAAGpC,IAAM,MACtC+B,EAEX,IAAK,kBACD,OAAO,2BAAIH,GAAX,kBAAmBC,EAAOZ,KAAOY,EAAOF,QAC5C,IAAK,mBACD,IAAIU,EAAS,eAAOT,GAEpB,cADOS,EAAUR,EAAOL,YACjBa,EAEX,QACI,OAAOT,IClDfM,UFuB4B,WAAqE,IAApEN,EAAmE,uDAA3DzB,EAAc0B,EAA6C,uCAChG,OAAQA,EAAOvB,MACX,IAAK,mBACD,OAAOsB,EAAMb,QAAO,SAAAqB,GAAE,OAAIA,EAAGpC,KAAO6B,EAAOL,cAC/C,IAAK,gBACD,OAAOK,EAAOK,UAAUD,KAAI,SAAAG,GAAE,kCAASA,GAAT,IAAarB,OAAQ,WACvD,IAAK,gBACD,MAAM,CAAN,2BAAYc,EAAOS,MAAnB,IAAyBvB,OAAQ,MAAOwB,aAAc,UAAtD,mBAAkEX,IACtE,IAAK,yBACD,OAAO,YAAIA,EAAMK,KAAI,SAAAG,GAAE,OAAIA,EAAGpC,KAAO6B,EAAO7B,GAAjB,2BAA0BoC,GAA1B,IAA8BtE,MAAO+D,EAAO/D,QAASsE,MACpF,IAAK,qBACD,OAAO,YAAIR,EAAMK,KAAI,SAAAG,GAAE,OAAIA,EAAGpC,KAAO6B,EAAO7B,GAAjB,2BAA0BoC,GAA1B,IAA8BrB,OAAQc,EAAOd,SAAUqB,MACtF,IAAK,qBACD,OAAOR,EAAMK,KAAI,SAAAG,GAAE,OAAIA,EAAGpC,KAAO6B,EAAOZ,KAAjB,2BAA4BmB,GAA5B,IAAgCG,aAAcV,EAAOU,eAAgBH,KAChG,QACI,OAAOR,IErCfY,IJDsB,WAAsF,IAArFZ,EAAoF,uDAA1DzB,EAAc0B,EAA4C,uCAC3G,OAAQA,EAAOvB,MACX,IAAK,iBACD,OAAO,2BAAIsB,GAAX,IAAkBxB,OAAQyB,EAAOzB,SACrC,IAAK,gBACD,OAAO,2BAAIwB,GAAX,IAAkB5D,MAAO6D,EAAO7D,QACpC,QACI,OAAO4D,MIHNa,EAAQC,YAAYjB,EAAakB,YAAgBC,MAGjDC,EAA4CC,IAMzD3F,OAAOsF,MAAQA,E,aCZFM,EAAerF,IAAMC,MAAK,SAACC,GAA8B,IAAD,EAEjCC,oBAAkB,GAFe,mBAE1DmF,EAF0D,KAEhDC,EAFgD,OAGvCpF,mBAAiBD,EAAME,OAHgB,mBAG1DA,EAH0D,KAGnDC,EAHmD,KAK3DmF,EAAa,kBAAMD,GAAY,IAC/BE,EAAc,WAChBF,GAAY,GACZrF,EAAMwF,YAAYtF,IAYtB,OACIkF,EAAW,cAAC3E,EAAA,EAAD,CACHC,SAAUV,EAAMU,SAChB+E,MAAO,CAACC,MAAO,SACf7E,MAAOX,EACPyF,OAAQJ,EACRK,WAAS,EAAC9E,SAVF,SAACC,GACjBZ,EAASY,EAAEC,cAAcH,QAUjBI,WAhBkB,SAACF,GACb,UAAVA,EAAEG,KACFqE,OAeE,uBAAMM,cAAeP,EAAYG,MAAO,CAACK,QAAS,eAAgBC,OAAQ,cAA1E,UAA0F/F,EAAME,MAC9F,cAACiB,EAAA,EAAD,CAAYsE,MAAO,CAACK,QAAS,gBACzBpF,SAAUV,EAAMU,SAAUU,KAAM,QAASC,QAASiE,EADtD,SAEA,cAACU,EAAA,EAAD,CAAMzE,SAAU,kB,2BC5BnB0E,EAAOnG,IAAMC,MAAK,SAACC,GAE5B,IAAM6C,EAAWqD,cACXC,EAAqBC,uBAAY,kBAAMvD,GH2DpBQ,EG3D0CrD,EAAMqG,WH2DlC/C,EG3D8CtD,EAAMuD,KAAKnB,GH4DhG,SAACS,GACDA,EAASJ,EAAe,YACxBW,EAAoBC,EAAMC,GACrBtB,MAAK,SAAAC,GACFY,EApEyD,CAACH,KAAM,oBAAqBgB,OAoE/DJ,EApEuEM,WAoE/DP,IAC9BR,EAASJ,EAAe,eANR,IAACY,EAAcC,IG1DnC,CAACT,EAAU7C,EAAMuD,KAAKnB,GAAIpC,EAAMqG,aAC9BC,EAAmBF,uBAAY,SAACrF,GAClC,IHyF2BsC,EAAcC,EAAgBd,EGzFrD3B,EAAQE,EAAEC,cAAcuF,QAAU5G,EAAa6G,UAAY7G,EAAa8G,IAC5E5D,GHwF2BQ,EGxFCrD,EAAMqG,WHwFO/C,EGxFKtD,EAAMuD,KAAKnB,GHwFAI,EGxFI3B,EHyF3D,SAACgC,EAAU6D,GACd7D,EAASJ,EAAe,YACxB,IAAMc,EAAOmD,IAAW3C,MAAMV,GAAMsD,MAAK,SAAAzC,GAAC,OAAIA,EAAE9B,KAAOkB,KAEvD,GAAIC,EAAM,CACN,IAAII,EAAoB,2BAAOJ,GAAP,IAAaf,WACrCY,EAAoBC,EAAMC,EAAQK,GAC7B3B,MAAK,SAAAC,GACFY,EAASY,EAAaH,EAAQK,EAAON,IACrCR,EAASJ,EAAe,YAE3BmE,OAAM,SAAAC,GACH7D,EAAyB6D,EAAKhE,YGpG1C,CAACA,EAAU7C,EAAMuD,KAAKnB,GAAIpC,EAAMqG,aAE7BS,EAAcV,uBAAY,SAAClG,GAC7B2C,EHwGyB,SAACQ,EAAcC,EAAgBpD,GAC5D,OAAO,SAAC2C,EAAU6D,GACd7D,EAASJ,EAAe,YACxB,IAAMc,EAAOmD,IAAW3C,MAAMV,GAAMsD,MAAK,SAAAzC,GAAC,OAAIA,EAAE9B,KAAOkB,KAEvD,GAAGC,EAAM,CACL,IAAII,EAAoB,2BAAOJ,GAAP,IAAarD,UACrCkD,EAAoBC,EAAMC,EAAQK,GAC7B3B,MAAK,SAAAC,GACFY,EAASY,EAAaH,EAAQK,EAAON,IACrCR,EAASJ,EAAe,YAE3BmE,OAAM,SAAAC,GACH7D,EAAyB6D,EAAKhE,QGrHjCkE,CAAkB/G,EAAMqG,WAAYrG,EAAMuD,KAAKnB,GAAIlC,MAC7D,CAAC2C,EAAU7C,EAAMuD,KAAKnB,GAAIpC,EAAMqG,aACnC,OAAO,eAACW,EAAA,EAAD,CACHvB,MAAO,CAACwB,QAAS,IAAKnB,QAAS,OAAQoB,eAAgB,iBACvDC,WAAY,SACZC,UAAWpH,EAAMuD,KAAKf,SAAW7C,EAAa6G,UAAY,UAAY,GAHnE,UAIH,cAACa,EAAA,EAAD,CACIvG,SAAUwF,EACVC,QAASvG,EAAMuD,KAAKf,SAAW7C,EAAa6G,UAC5Cc,MAAO,UACPlG,KAAM,UACV,cAAC+D,EAAD,CAAcK,YAAasB,EAAa5G,MAAOF,EAAMuD,KAAKrD,QAC1D,cAACiB,EAAA,EAAD,CAAYC,KAAM,QAASC,QAAS8E,EAApC,SACI,cAACoB,EAAA,EAAD,CAAQhG,SAAU,kB,qCCpBjBiG,GAAY1H,IAAMC,MAAK,SAAUC,GAE1C,IAAMyH,EAAWvC,aAA8C,SAAAlB,GAAK,OAAIA,EAAMM,UAAUnB,QAAO,SAAAqB,GAAE,OAAIA,EAAGpC,KAAOpC,EAAMqG,cAAY,MAC3HtC,EAAQmB,aAA0C,SAAAlB,GAAK,OAAIA,EAAMD,MAAM/D,EAAMqG,eAC7ExD,EAAWqD,cAEjBwB,qBAAU,WJ0CY,IAACrE,EIzCnBR,GJyCmBQ,EIzCCoE,EAASrF,GJ0CjC,SAACS,GACGA,EAASJ,EAAe,YAC5BW,EAAkBC,GACbrB,MAAK,SAAAC,GACFY,EAtDc,SAACQ,EAAcU,GAAf,MAAsC,CAACrB,KAAM,kBAAmBqB,QAAOV,QAsD5EsE,CAAWtE,EAAMpB,EAAI2F,QAC9B/E,EAASJ,EAAe,iBI9C9B,IAEF,IAAMoF,EAAUzB,uBAAY,SAAClG,GACzB2C,EJyDoB,SAACQ,EAAcnD,GAAf,OACxB,SAAC2C,GACDA,EAASJ,EAAe,YACxBW,EAAoBC,EAAMnD,GACrB8B,MAAK,SAAAC,GACqB,IAAnBA,EAAI6F,YACJjF,EA9E8B,CAACH,KAAM,iBAAkBa,KA8EpCtB,EAAIC,KAAKsB,OAC5BX,EAASJ,EAAe,WAEpBR,EAAIa,SAASC,OACbF,EAASF,EAAcV,EAAIa,SAAS,KAEpCD,EAASF,EAAc,uBAE3BE,EAASJ,EAAe,eAG/BmE,OAAM,SAAAC,GACHhE,EAASF,EAAckE,EAAI5D,UAC3BJ,EAASJ,EAAe,eI5EnBsF,CAAaN,EAASrF,GAAIlC,MACpC,CAAC2C,EAAU7C,EAAMqG,aAEd2B,EAAsB5B,uBAAY,SAAClG,GACrC2C,ELmEyB,SAACQ,EAAcnD,GAAf,OAC7B,SAAC2C,GACGA,EAASJ,EAAe,YACxBX,EAA0BuB,EAAMnD,GAC3B8B,MAAK,SAAAC,GACqB,IAAnBA,EAAI6F,YACJjF,EAzFa,SAAC3C,EAAekC,GAAhB,MAAgC,CAACM,KAAM,yBAA0BxC,QAAOkC,MAyF5E6F,CAAkB/H,EAAOmD,IAClCR,EAASJ,EAAe,UAExBG,EAAqBX,EAAKY,MAGjC+D,OAAM,SAAAC,GAAG,OAAI7D,EAAyB6D,EAAKhE,OK/EvCqF,CAAkBlI,EAAMqG,WAAYnG,MAC9C,CAAC2C,EAAU7C,EAAMqG,aAEd8B,EAAiB/B,uBAAY,WLiCX,IAAC/C,EKhCrBR,GLgCqBQ,EKhCCrD,EAAMqG,WLiChC,SAACxD,GACGA,EApDwB,SAACQ,EAAcsB,GAAf,MAC3B,CAACjC,KAAM,qBAAsBW,OAAMsB,aAmDA,WAAvByD,CAAiB/E,IAC1BR,EAASJ,EAAe,YACxBX,EAAqBuB,GAChBrB,MAAK,SAAAC,GACqB,IAAnBA,EAAI6F,YACJjF,EA9DqC,CAACH,KAAM,mBAAoBkB,WA8DtCP,IAC1BR,EAASJ,EAAe,UAExBG,EAAqBX,EAAKY,MAGjC+D,OAAM,SAAAC,GAAG,OAAI7D,EAAyB6D,EAAKhE,WK5ClD,CAACA,EAAU7C,EAAMqG,aAEbgC,EAAoBjC,uBAAY,kBAAMvD,EAASK,EAAmB,MAAOlD,EAAMqG,eAAc,CAACxD,EAAU7C,EAAMqG,aAC9GiC,EAAuBlC,uBAAY,kBAAMvD,EAASK,EAAmB,SAAUlD,EAAMqG,eAAc,CAACxD,EAAU7C,EAAMqG,aACpHkC,EAA0BnC,uBAAY,kBAAMvD,EAASK,EAAmB,YAAalD,EAAMqG,eAAc,CAACxD,EAAU7C,EAAMqG,aAE5HmC,EAAiBzE,EAIrB,MAHwB,WAApB0D,EAAStE,SAAqBqF,EAAiBzE,EAAMZ,QAAO,SAAAe,GAAC,OAAIA,EAAE1B,SAAW7C,EAAa8G,QACvE,cAApBgB,EAAStE,SAAwBqF,EAAiBzE,EAAMZ,QAAO,SAAAe,GAAC,OAAIA,EAAE1B,SAAW7C,EAAa6G,cAE3F,sBAAKY,UAAW,WAAhB,UACH,eAACqB,EAAA,EAAD,CAAYC,MAAO,SAAnB,UACI,cAACvD,EAAD,CAAczE,SAAoC,YAA1B+G,EAAS9C,aAC7Ba,YAAawC,EAAqB9H,MAAOF,EAAME,QACnD,cAACiB,EAAA,EAAD,CAAYT,SAAoC,YAA1B+G,EAAS9C,aAA4BtD,QAAS8G,EAApE,SACI,cAACZ,EAAA,EAAD,SAGR,cAAC1H,EAAD,CAAaa,SAAoC,YAA1B+G,EAAS9C,aAA4BrE,QAASuH,IACrE,cAACc,EAAA,EAAD,UAEQH,GAAkBA,EAAenE,KAAI,SAAAH,GACjC,OAAO,cAAC+B,EAAD,CAAiB1C,KAAMW,EAAGmC,WAAYrG,EAAMqG,YAAjCnC,EAAE9B,SAIhC,8BACI,eAACwG,EAAA,EAAD,CAAaC,QAAS,WAAYC,aAAY,sBAAuBC,kBAAgB,EAArF,UACI,cAACC,GAAA,EAAD,CAAQH,QAA6B,QAApBpB,EAAStE,OAAmB,YAAc,WACvDzC,SAAoC,YAA1B+G,EAAS9C,aAA4BtD,QAASgH,EAD5D,iBAEA,cAACW,GAAA,EAAD,CAAQH,QAA6B,WAApBpB,EAAStE,OAAsB,YAAc,WAC1DzC,SAAoC,YAA1B+G,EAAS9C,aAA4BtD,QAASiH,EAD5D,oBAEA,cAACU,GAAA,EAAD,CAAQH,QAA6B,cAApBpB,EAAStE,OAAyB,YAAc,WAC7DzC,SAAoC,YAA1B+G,EAAS9C,aAA4BtD,QAASkH,EAD5D,kC,0FC9DVU,GAAQnJ,IAAMoJ,YAAuC,SACvDlJ,EAAOmJ,GACP,OAAO,cAAC,KAAD,aAAUC,UAAW,EAAGD,IAAKA,EAAKN,QAAQ,UAAa7I,OAG3D,SAASqJ,KAAiB,IACtBjJ,EAAS6E,GAAe,SAAAjB,GAAK,OAAIA,EAAMY,OAAvCxE,MACDyC,EAAWqD,cAEXoD,EAAc,SAACC,EAAsCC,GACxC,cAAXA,GAGJ3G,EAASF,EAAc,QAG3B,OACI,cAAC8G,GAAA,EAAD,CAAUC,KAAMtJ,EAAOuJ,iBAAkB,IAAMC,QAASN,EAAxD,SACI,cAAC,GAAD,CAAOM,QAASN,EAAaO,SAAS,QAAQC,GAAI,CAACpE,MAAO,QAA1D,SACKtF,MCwCF2J,OAtDf,WAEI,IAAMC,EAAY9E,aAA0C,SAAAlB,GAAK,OAAIA,EAAMM,aACpE9B,EAAUyC,GAAe,SAAAjB,GAAK,OAAIA,EAAMY,OAAxCpC,OACDK,EAAWqD,cAEjBwB,qBAAU,WACN7E,GPmCJ,SAACA,EAAU6D,GACP7D,EAASJ,EAAe,YACxBX,IACKE,MAAK,SAAAC,GACCA,GACCY,EA5CuC,CAACH,KAAM,gBAAiB4B,UA4C5CrC,IACnBY,EAASJ,EAAe,UAExBG,EAAqBX,EAAKY,MAGjC+D,OAAM,SAAAC,GAAG,OAAI7D,EAAyB6D,EAAKhE,WO7CjD,IAEH,IAAMoH,EAAc7D,uBAAY,SAAClG,GAC7B2C,EP6DoB,SAAC3C,GAAD,OACxB,SAAC2C,GACGA,EAASJ,EAAe,YACxBX,EAAqB5B,GAChB8B,MAAK,SAAAC,GACqB,IAAnBA,EAAI6F,YACJjF,EA5EK,SAAC3C,EAAewE,GAAhB,MAA0C,CAAChC,KAAM,gBAAiBxC,QAAOwE,QA4ErEwF,CAAUhK,EAAO+B,EAAIC,KAAKsB,OACnCX,EAASJ,EAAe,UAExBG,EAAqBX,EAAKY,MAGjC+D,OAAM,SAAAC,GAAG,OAAI7D,EAAyB6D,EAAKhE,OOzEvCsH,CAAajK,MACvB,CAAC2C,IAEEuH,EAAsBJ,EAAU3F,KAAI,SAAAG,GACtC,OACI,cAAC6F,GAAA,EAAD,CAAM7G,MAAI,EAAV,SACI,cAAC8G,GAAA,EAAD,CAAOlB,UAAW,GAAI3D,MAAO,CAACwB,QAAS,QAAvC,SACI,cAACO,GAAD,CACInB,WAAY7B,EAAGpC,GACflC,MAAOsE,EAAGtE,WAJNsE,EAAGpC,OAU3B,OACI,sBAAKgF,UAAW,MAAhB,UACI,cAACmD,GAAA,EAAD,CAAQC,SAAS,SAAjB,SACI,eAACC,GAAA,EAAD,CAAShF,MAAO,CAACyB,eAAgB,iBAAjC,UACI,cAAC/F,EAAA,EAAD,CAAYuJ,KAAK,QAAQpD,MAAM,UAAUwB,aAAW,OAApD,SACI,cAAC6B,GAAA,EAAD,MAEJ,cAAClC,EAAA,EAAD,CACII,QAAQ,KADZ,uBAIA,cAACG,GAAA,EAAD,CAAQ1B,MAAM,UAAUuB,QAAS,WAAjC,wBAGI,YAAXrG,GAAwB,cAACoI,GAAA,EAAD,IACzB,cAACC,GAAA,EAAD,CAAWC,OAAK,EAAhB,SACI,eAACT,GAAA,EAAD,CAAMU,WAAS,EAACtF,MAAO,CAACwB,QAAS,UAAjC,UACI,cAACpH,EAAD,CAAaS,QAAS2J,IACtB,cAACI,GAAA,EAAD,CAAMU,WAAS,EAACC,QAAS,EAAzB,SACKZ,SAIb,cAACf,GAAD,QCrDZ4B,IAASC,OACL,cAAC,IAAD,CAAUrG,MAAOA,EAAjB,SACI,cAAC,GAAD,MACSsG,SAASC,eAAe,SdgInC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvJ,MAAK,SAAAwJ,GACJA,EAAaC,gBAEd7E,OAAM,SAAAxG,GACLsL,QAAQtL,MAAMA,EAAM6C,c","file":"static/js/main.3a293322.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios, {AxiosResponse} from 'axios';\r\nimport {ResponseType} from './todolist-api';\r\n\r\nconst axiosInstance = axios.create({\r\n    baseURL: `https://social-network.samuraijs.com/api/1.1/todo-lists/`,\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'ecad3ae6-8083-4154-b722-6cea4b99f288'\r\n    }\r\n})\r\n\r\nexport const tasksAPI = {\r\n    getTasks(tlId: string) {\r\n        return axiosInstance.get<Response<TaskType[]>>(`${tlId}/tasks`).then(res => res.data)\r\n    },\r\n    createTask(tlId: string, title: string) {\r\n        return axiosInstance.post<{title: string},AxiosResponse<ResponseType<{ item: TaskType }>>>(`${tlId}/tasks`, {title}).then(res => res.data)\r\n    },\r\n    deleteTask(tlId: string, taskId: string) {\r\n        return axiosInstance.delete<Response>(`${tlId}/tasks/${taskId}`).then(res => res.data)\r\n    },\r\n    updateTask(tlId: string, taskId: string, task: TaskModelType) {\r\n        return axiosInstance.put<TaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`${tlId}/tasks/${taskId}`, task).then(res => res.data.data.item)\r\n    }\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3,\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    High = 2,\r\n    Urgently = 3,\r\n    Later = 4,\r\n}\r\n\r\nexport type TaskType = {\r\n    title: string,\r\n    description: string,\r\n    status: TaskStatuses,\r\n    priority: number,\r\n    startDate: string,\r\n    deadline: string,\r\n    id: string,\r\n    todoListId: string,\r\n    order: string,\r\n    addedDate: string,\r\n}\r\n\r\nexport type TaskModelType = {\r\n    title: string,\r\n    description: string,\r\n    status: TaskStatuses,\r\n    priority: TaskPriorities,\r\n    startDate: string,\r\n    deadline: string,\r\n}\r\n\r\ntype Response<D = {}> = {\r\n    items: D,\r\n    error: string[],\r\n    totalCount: number\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@mui/material';\r\nimport {AddOutlined} from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\r\n    let [title, setTitle] = useState<string>(\"\")\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        setError(false)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    const addItem = () => {\r\n        const trimmedTitle = title.trim();\r\n        setTitle(\"\");\r\n        if (trimmedTitle) {\r\n            props.addItem(trimmedTitle);\r\n        } else {\r\n            setError(true);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                disabled={props.disabled}\r\n                error={error}\r\n                helperText={error && 'Title is required'}\r\n                label={'Enter title'}\r\n                value={title}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n            />\r\n            <IconButton disabled={props.disabled} size={'small'} onClick={addItem}>\r\n                <AddOutlined fontSize={'large'}/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import axios, {AxiosResponse} from 'axios';\r\nimport {TodoDomainType} from '../state/todolists-reducer';\r\n\r\nconst axiosInstance = axios.create({\r\n    baseURL: `https://social-network.samuraijs.com/api/1.1/`,\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'ecad3ae6-8083-4154-b722-6cea4b99f288'\r\n    }\r\n})\r\n\r\nexport const todolistApi = {\r\n    getTLs() {\r\n        return axiosInstance.get<TodoDomainType[]>(`todo-lists`).then(res => res.data)\r\n    },\r\n    createTL(title: string) {\r\n        return axiosInstance.post<{title: string}, AxiosResponse<ResponseType<{ item: TodoDomainType }>>>(`todo-lists`, {title}).then(res => res.data)\r\n    },\r\n    deleteTL(id: string) {\r\n        return axiosInstance.delete<ResponseType>(`/todo-lists/${id}`).then(res => res.data)\r\n    },\r\n    updateTLTitle(id: string, title: string) {\r\n        return axiosInstance.put<{title: string},ResponseType>(`/todo-lists/${id}`, {title})\r\n    },\r\n}\r\n\r\nexport type TodoType = {\r\n    id: string,\r\n    title: string,\r\n    addedDate: string,\r\n    order: number,\r\n}\r\n\r\nexport type ResponseType<T = {}> = {\r\n    fieldsErrors: string[],\r\n    messages: string[],\r\n    resultCode: number,\r\n    data: T\r\n}","export type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as string | null,\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: AppActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\n\r\nexport type SetAppStatusType = ReturnType<typeof setAppStatusAC>\r\nexport type SetAppErrorType = ReturnType<typeof setAppErrorAC>\r\n\r\nexport type AppActionType = SetAppStatusType | SetAppErrorType","import {ResponseType} from '../api/todolist-api';\r\nimport {Dispatch} from 'redux';\r\nimport {setAppErrorAC, SetAppErrorType, setAppStatusAC, SetAppStatusType} from '../state/app-reducer';\r\n\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occured'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: {message: string}, dispatch: ErrorUtilsDispatchType) => {\r\n    dispatch(setAppErrorAC(error.message))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\ntype ErrorUtilsDispatchType = Dispatch<SetAppErrorType | SetAppStatusType>","import {ThunkAction} from 'redux-thunk';\r\nimport {AppRootStateType, ThunkType} from './store';\r\nimport {todolistApi, TodoType} from '../api/todolist-api';\r\nimport {RequestStatusType, setAppErrorAC, setAppStatusAC} from './app-reducer';\r\nimport {handleServerAppError, handleServerNetworkError} from '../utils/error-utils';\r\n\r\nexport type RemoveTodoListAT = ReturnType<typeof removeTodolistAC>\r\nexport type setTodoAT = ReturnType<typeof setTodoAC>\r\ntype ChangeTodoTitleAT = ReturnType<typeof changeTodoTitleAC>\r\ntype ChangeTodoFilterAT = ReturnType<typeof changeTodoFilterAC>\r\ntype AddTodoAT = ReturnType<typeof addTodoAC>\r\ntype ChangeEntityType = ReturnType<typeof changeTlEntityAC>\r\n\r\nexport const removeTodolistAC = (todolistID: string) => ({type: 'TODO/REMOVE-TODO', todolistID} as const)\r\nexport const addTodoAC = (title: string, todo: TodoDomainType) => ({type: 'TODO/ADD-TODO', title, todo} as const)\r\nexport const setTodoAC = (todolists: TodoDomainType[]) => ({type: 'TODO/SET-TODO', todolists} as const)\r\nexport const changeTodoTitleAC = (title: string, id: string) => ({type: 'TODO/CHANGE-TODO-TITLE', title, id} as const)\r\nexport const changeTodoFilterAC = (filter: FilterValuesType, id: string) => ({type: 'TODO/CHANGE-FILTER', filter, id} as const)\r\nexport const changeTlEntityAC = (tlId: string, entityStatus: RequestStatusType) =>\r\n    ({type: 'TODO/CHANGE-ENTITY', tlId, entityStatus} as const)\r\n\r\nexport type TodoActionType = RemoveTodoListAT | setTodoAT | ChangeTodoTitleAT\r\n    | ChangeTodoFilterAT | AddTodoAT | ChangeEntityType\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodoDomainType = TodoType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nconst initialState: TodoDomainType[] = []\r\n\r\nexport const todolistsReducer = (state = initialState, action: TodoActionType): TodoDomainType[] => {\r\n    switch (action.type) {\r\n        case 'TODO/REMOVE-TODO':\r\n            return state.filter(tl => tl.id !== action.todolistID);\r\n        case 'TODO/SET-TODO':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all'}));\r\n        case 'TODO/ADD-TODO':\r\n            return [{...action.todo, filter: 'all', entityStatus: 'idle'}, ...state]\r\n        case 'TODO/CHANGE-TODO-TITLE':\r\n            return [...state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)];\r\n        case 'TODO/CHANGE-FILTER':\r\n            return [...state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)]\r\n        case 'TODO/CHANGE-ENTITY':\r\n            return state.map(tl => tl.id === action.tlId ? {...tl, entityStatus: action.entityStatus} : tl)\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// THUNK\r\n\r\nexport const getTodoTC = (): ThunkType =>\r\n    (dispatch, getState) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistApi.getTLs()\r\n            .then(res => {\r\n                if(res) {\r\n                    dispatch(setTodoAC(res))\r\n                    dispatch(setAppStatusAC('idle'))\r\n                } else {\r\n                    handleServerAppError(res, dispatch)\r\n                }\r\n            })\r\n            .catch(err => handleServerNetworkError(err, dispatch))\r\n    }\r\n\r\nexport const removeTodoTC = (tlId: string): ThunkType =>\r\n    (dispatch) => {\r\n        dispatch(changeTlEntityAC(tlId, 'loading'))\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistApi.deleteTL(tlId)\r\n            .then(res => {\r\n                if (res.resultCode === 0) {\r\n                    dispatch(removeTodolistAC(tlId))\r\n                    dispatch(setAppStatusAC('idle'))\r\n                } else {\r\n                    handleServerAppError(res, dispatch)\r\n                }\r\n            })\r\n            .catch(err => handleServerNetworkError(err, dispatch))\r\n    }\r\n\r\nexport const createTodoTC = (title: string): ThunkType =>\r\n    (dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistApi.createTL(title)\r\n            .then(res => {\r\n                if (res.resultCode === 0) {\r\n                    dispatch(addTodoAC(title, res.data.item))\r\n                    dispatch(setAppStatusAC('idle'))\r\n                } else {\r\n                    handleServerAppError(res, dispatch)\r\n                }\r\n            })\r\n            .catch(err => handleServerNetworkError(err, dispatch))\r\n    }\r\n\r\nexport const changeTodoTitleTC = (tlId: string, title: string): ThunkType =>\r\n    (dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistApi.updateTLTitle(tlId, title)\r\n            .then(res => {\r\n                if (res.resultCode === 0) {\r\n                    dispatch(changeTodoTitleAC(title, tlId))\r\n                    dispatch(setAppStatusAC('idle'))\r\n                } else {\r\n                    handleServerAppError(res, dispatch)\r\n                }\r\n            })\r\n            .catch(err => handleServerNetworkError(err, dispatch))\r\n    }","import {TaskModelType, tasksAPI, TaskStatuses, TaskType} from '../api/tasks-api';\r\nimport {RemoveTodoListAT, setTodoAT} from './todolists-reducer';\r\nimport {ThunkType} from './store';\r\nimport {setAppErrorAC, setAppStatusAC} from './app-reducer';\r\nimport {handleServerNetworkError} from '../utils/error-utils';\r\n\r\nexport type RemoveTaskAT = ReturnType<typeof removeTaskAC>\r\nexport type AddTaskAT = ReturnType<typeof addTaskAC>\r\nexport type updateTaskAT = ReturnType<typeof updateTaskAC>\r\nexport type ChangeTaskTitleAT = ReturnType<typeof changeTaskTitleAC>\r\nexport type SetTasksAT = ReturnType<typeof setTasksAC>\r\n\r\nexport const removeTaskAC = (taskID: string, todolistID: string) => ({type: 'TASKS/REMOVE-TASK', taskID, todolistID} as const)\r\nexport const addTaskAC = (task: TaskType) => ({type: 'TASKS/ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskID: string, model: TaskModelType, todolistID: string) => ({type: 'TASKS/UPDATE-TASK', taskID, model, todolistID} as const)\r\nexport const changeTaskTitleAC = (taskID: string, title: string, todolistID: string) => ({type: 'TASKS/CHANGE-TITLE', taskID, title, todolistID} as const)\r\nexport const setTasksAC = (tlId: string, tasks: TaskType[]) => ({type: 'TASKS/SET-TASKS', tasks, tlId} as const)\r\n\r\nexport type TaskActionType = RemoveTaskAT\r\n    | AddTaskAT\r\n    | updateTaskAT\r\n    | ChangeTaskTitleAT\r\n    | setTodoAT\r\n    | RemoveTodoListAT\r\n    | SetTasksAT\r\n\r\ntype TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state = initialState, action: TaskActionType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'TASKS/REMOVE-TASK':\r\n            return {...state, [action.todolistID]: state[action.todolistID].filter(t => t.id !== action.taskID)};\r\n        case 'TASKS/ADD-TASK': {\r\n            let copy = {...state}\r\n            let tasks = copy[action.task.todoListId]\r\n            copy[action.task.todoListId] = [action.task, ...tasks]\r\n            return copy\r\n        }\r\n        case 'TASKS/UPDATE-TASK':\r\n            return {...state, [action.todolistID]: state[action.todolistID].map(t => action.taskID === t.id ? {...t, ...action.model} : t)}\r\n        case 'TASKS/CHANGE-TITLE':\r\n            return {...state, [action.todolistID]: state[action.todolistID].map(t => t.id === action.taskID ? {...t, title: action.title} : t)}\r\n        case 'TODO/SET-TODO': {\r\n            let copy = {...state}\r\n            action.todolists.forEach(tl => copy[tl.id] = [])\r\n            return copy\r\n        }\r\n        case 'TASKS/SET-TASKS':\r\n            return {...state, [action.tlId]: action.tasks}\r\n        case 'TODO/REMOVE-TODO': {\r\n            let stateCopy = {...state}\r\n            delete stateCopy[action.todolistID]\r\n            return stateCopy\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// THUNK\r\n\r\nexport const getTasksTC = (tlId: string): ThunkType =>\r\n    (dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n    tasksAPI.getTasks(tlId)\r\n        .then(res => {\r\n            dispatch(setTasksAC(tlId, res.items))\r\n            dispatch(setAppStatusAC('idle'))\r\n        })\r\n}\r\n\r\nexport const deleteTaskTC = (tlId: string, taskId: string): ThunkType =>\r\n    (dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    tasksAPI.deleteTask(tlId, taskId)\r\n        .then(res => {\r\n            dispatch(removeTaskAC(taskId, tlId))\r\n            dispatch(setAppStatusAC('idle'))\r\n        })\r\n}\r\n\r\nexport const createTaskTC = (tlId: string, title: string): ThunkType =>\r\n    (dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    tasksAPI.createTask(tlId, title)\r\n        .then(res => {\r\n            if (res.resultCode === 0) {\r\n                dispatch(addTaskAC(res.data.item))\r\n                dispatch(setAppStatusAC('idle'))\r\n            } else {\r\n                if (res.messages.length) {\r\n                    dispatch(setAppErrorAC(res.messages[0]))\r\n                } else {\r\n                    dispatch(setAppErrorAC('Some error occured'))\r\n                }\r\n                dispatch(setAppStatusAC('failed'))\r\n            }\r\n        })\r\n        .catch(err => {\r\n            dispatch(setAppErrorAC(err.message))\r\n            dispatch(setAppStatusAC('failed'))\r\n        })\r\n}\r\n\r\nexport const updateTaskStatusTC = (tlId: string, taskId: string, status: TaskStatuses): ThunkType => {\r\n   return (dispatch, getState) => {\r\n       dispatch(setAppStatusAC('loading'))\r\n       const task = getState().tasks[tlId].find(t => t.id === taskId)\r\n\r\n       if (task) {\r\n           let model: TaskModelType = {...task, status}\r\n           tasksAPI.updateTask(tlId, taskId, model)\r\n               .then(res => {\r\n                   dispatch(updateTaskAC(taskId, model, tlId))\r\n                   dispatch(setAppStatusAC('idle'))\r\n               })\r\n               .catch(err => {\r\n                   handleServerNetworkError(err, dispatch)\r\n               })\r\n\r\n       }\r\n    }\r\n}\r\n\r\nexport const changeTaskTitleTC = (tlId: string, taskId: string, title: string): ThunkType => {\r\n    return (dispatch, getState) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        const task = getState().tasks[tlId].find(t => t.id === taskId)\r\n\r\n        if(task) {\r\n            let model: TaskModelType = {...task, title}\r\n            tasksAPI.updateTask(tlId, taskId, model)\r\n                .then(res => {\r\n                    dispatch(updateTaskAC(taskId, model, tlId))\r\n                    dispatch(setAppStatusAC('idle'))\r\n                })\r\n                .catch(err => {\r\n                    handleServerNetworkError(err, dispatch)\r\n                })\r\n        }\r\n    }\r\n}","import {TaskActionType, tasksReducer} from './tasks-reducer';\r\nimport {TodoActionType, todolistsReducer} from './todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk, {ThunkAction} from 'redux-thunk';\r\nimport {TypedUseSelectorHook, useSelector} from 'react-redux';\r\nimport {AppActionType, appReducer} from './app-reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\ntype AppRootActionType = TodoActionType | TaskActionType | AppActionType\r\nexport const useAppSelector: TypedUseSelectorHook<any> = useSelector\r\nexport type ThunkType = ThunkAction<void, AppRootStateType, unknown, AppRootActionType>\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@mui/material';\r\nimport {Edit} from '@mui/icons-material';\r\n\r\ntype EditableSpanProps = {\r\n    title: string\r\n    setNewTitle: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanProps) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(props.title)\r\n\r\n    const onEditMode = () => setEditMode(true)\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.setNewTitle(title)\r\n    }\r\n\r\n    const onKeyPressOffEditMode = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter')\r\n            offEditMode()\r\n    }\r\n\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        editMode ? <TextField\r\n                disabled={props.disabled}\r\n                style={{width: '148px'}}\r\n                value={title}\r\n                onBlur={offEditMode}\r\n                autoFocus onChange={changeTitle}\r\n                onKeyPress={onKeyPressOffEditMode}/>\r\n            : <span onDoubleClick={onEditMode} style={{display: 'inline-block', margin: '0 auto 0 0'}}>{props.title}\r\n                <IconButton style={{display: 'inline-block'}}\r\n                    disabled={props.disabled} size={'small'} onClick={onEditMode}>\r\n                <Edit fontSize={'small'}/>\r\n            </IconButton>\r\n        </span>\r\n    )\r\n})","import {useDispatch} from 'react-redux';\r\nimport {deleteTaskTC, updateTaskStatusTC, changeTaskTitleTC} from '../state/tasks-reducer';\r\nimport React, {ChangeEvent, useCallback} from 'react';\r\nimport {EditableSpan} from '../EditableSpan';\r\nimport {TaskStatuses, TaskType} from '../api/tasks-api';\r\nimport {Checkbox, IconButton, ListItem} from '@mui/material';\r\nimport {Delete} from '@mui/icons-material';\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType,\r\n    todolistId: string,\r\n}\r\n\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n\r\n    const dispatch = useDispatch()\r\n    const removeTaskCallback = useCallback(() => dispatch(deleteTaskTC(props.todolistId, props.task.id)),\r\n        [dispatch, props.task.id, props.todolistId])\r\n    const changeTaskStatus = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let value = e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New\r\n        dispatch(updateTaskStatusTC(props.todolistId, props.task.id, value))\r\n    }, [dispatch, props.task.id, props.todolistId])\r\n\r\n    const changeTitle = useCallback((title: string) => {\r\n        dispatch(changeTaskTitleTC(props.todolistId, props.task.id, title))\r\n    }, [dispatch, props.task.id, props.todolistId])\r\n    return <ListItem\r\n        style={{padding: '0', display: 'flex', justifyContent: 'space-between'}}\r\n        alignItems={'center'}\r\n        className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            onChange={changeTaskStatus}\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color={'primary'}\r\n            size={'small'}/>\r\n        <EditableSpan setNewTitle={changeTitle} title={props.task.title}/>\r\n        <IconButton size={'small'} onClick={removeTaskCallback}>\r\n            <Delete fontSize={'small'}/>\r\n        </IconButton>\r\n    </ListItem>\r\n})","import React, {useCallback, useEffect} from 'react';\r\nimport {TaskStatuses, TaskType} from '../api/tasks-api';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {EditableSpan} from '../EditableSpan';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../state/store';\r\nimport {changeTodoFilterAC, changeTodoTitleTC, removeTodoTC, TodoDomainType} from '../state/todolists-reducer';\r\nimport {createTaskTC, getTasksTC} from '../state/tasks-reducer';\r\nimport {Task} from './Task';\r\nimport {Button, ButtonGroup, IconButton, List, Typography} from '@mui/material';\r\nimport {Delete} from '@mui/icons-material';\r\n\r\ntype PropsType = {\r\n    todolistId: string\r\n    title: string\r\n}\r\n\r\nexport const Todolist1 = React.memo(function (props: PropsType) {\r\n\r\n    const todoList = useSelector<AppRootStateType, TodoDomainType>(state => state.todolists.filter(tl => tl.id === props.todolistId)[0])\r\n    const tasks = useSelector<AppRootStateType, TaskType[]>(state => state.tasks[props.todolistId])\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(getTasksTC(todoList.id))\r\n    },[])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        dispatch(createTaskTC(todoList.id, title));\r\n    }, [dispatch, props.todolistId])\r\n\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        dispatch(changeTodoTitleTC(props.todolistId, title));\r\n    }, [dispatch, props.todolistId])\r\n\r\n    const removeTodolist = useCallback(() => {\r\n        dispatch(removeTodoTC(props.todolistId))\r\n    },[dispatch, props.todolistId])\r\n\r\n    const onAllClickHandler = useCallback(() => dispatch(changeTodoFilterAC(\"all\", props.todolistId)), [dispatch, props.todolistId]);\r\n    const onActiveClickHandler = useCallback(() => dispatch(changeTodoFilterAC(\"active\", props.todolistId)), [dispatch, props.todolistId]);\r\n    const onCompletedClickHandler = useCallback(() => dispatch(changeTodoFilterAC(\"completed\", props.todolistId)), [dispatch, props.todolistId]);\r\n\r\n    let tasksForRender = tasks;\r\n    if (todoList.filter === \"active\") tasksForRender = tasks.filter(t => t.status === TaskStatuses.New);\r\n    if (todoList.filter === \"completed\") tasksForRender = tasks.filter(t => t.status === TaskStatuses.Completed);\r\n\r\n    return <div className={'todoList'}>\r\n        <Typography align={'center'}>\r\n            <EditableSpan disabled={todoList.entityStatus === 'loading'}\r\n                setNewTitle={changeTodolistTitle} title={props.title}/>\r\n            <IconButton disabled={todoList.entityStatus === 'loading'} onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </Typography>\r\n        <AddItemForm disabled={todoList.entityStatus === 'loading'} addItem={addTask}/>\r\n        <List>\r\n            {\r\n                tasksForRender && tasksForRender.map(t => {\r\n                    return <Task key={t.id} task={t} todolistId={props.todolistId}/>\r\n                })\r\n            }\r\n        </List>\r\n        <div>\r\n            <ButtonGroup variant={'outlined'} aria-label={'medium button group'} disableElevation>\r\n                <Button variant={todoList.filter === 'all' ? 'contained' : 'outlined'}\r\n                    disabled={todoList.entityStatus === 'loading'} onClick={onAllClickHandler}>All</Button>\r\n                <Button variant={todoList.filter === 'active' ? 'contained' : 'outlined'}\r\n                    disabled={todoList.entityStatus === 'loading'} onClick={onActiveClickHandler}>Active</Button>\r\n                <Button variant={todoList.filter === 'completed' ? 'contained' : 'outlined'}\r\n                    disabled={todoList.entityStatus === 'loading'} onClick={onCompletedClickHandler}>Completed</Button>\r\n            </ButtonGroup>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, { useState } from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\nimport {useAppSelector} from '../state/store';\r\nimport {useDispatch} from 'react-redux';\r\nimport {setAppErrorAC} from '../state/app-reducer';\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport function ErrorSnackbar() {\r\n    const {error} = useAppSelector(state => state.app)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error} autoHideDuration={5000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport {AddItemForm} from './Components/AddItemForm';\r\nimport {createTodoTC, getTodoTC} from './state/todolists-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType, useAppSelector} from './state/store';\r\nimport {Todolist1} from './Components/TodoList1';\r\nimport {TodoType} from './api/todolist-api';\r\nimport {Menu} from '@mui/icons-material';\r\nimport {AppBar, Button, Container, Grid, IconButton, LinearProgress, Paper, Toolbar, Typography} from '@mui/material';\r\nimport {ErrorSnackbar} from './Components/ErrorSnackbar';\r\n\r\nfunction App() {\r\n\r\n    const todoLists = useSelector<AppRootStateType, TodoType[]>(state => state.todolists)\r\n    const {status} = useAppSelector(state => state.app)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(getTodoTC())\r\n    }, [])\r\n\r\n    const addTodoList = useCallback((title: string) => {\r\n        dispatch(createTodoTC(title))\r\n    }, [dispatch])\r\n\r\n    const todoListsComponents = todoLists.map(tl => {\r\n        return (\r\n            <Grid item key={tl.id}>\r\n                <Paper elevation={14} style={{padding: '10px'}}>\r\n                    <Todolist1\r\n                        todolistId={tl.id}\r\n                        title={tl.title}\r\n                    />\r\n                </Paper>\r\n            </Grid>\r\n        )\r\n    })\r\n    return (\r\n        <div className={'App'}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar style={{justifyContent: \"space-between\"}}>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography\r\n                        variant=\"h6\">\r\n                        Todolists\r\n                    </Typography>\r\n                    <Button color=\"inherit\" variant={\"outlined\"}>Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            {status === 'loading' && <LinearProgress/>}\r\n            <Container fixed>\r\n                <Grid container style={{padding: '30px 0'}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                    <Grid container spacing={5}>\r\n                        {todoListsComponents}\r\n                    </Grid>\r\n                </Grid>\r\n            </Container>\r\n            <ErrorSnackbar/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './App';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './state/store';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}